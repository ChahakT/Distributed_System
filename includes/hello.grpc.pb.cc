// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: hello.proto

#include "hello.pb.h"
#include "hello.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace afs {

static const char* gRPCService_method_names[] = {
  "/afs.gRPCService/s_getattr",
  "/afs.gRPCService/s_readdir",
};

std::unique_ptr< gRPCService::Stub> gRPCService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< gRPCService::Stub> stub(new gRPCService::Stub(channel));
  return stub;
}

gRPCService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_s_getattr_(gRPCService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_s_readdir_(gRPCService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status gRPCService::Stub::s_getattr(::grpc::ClientContext* context, const ::afs::PathRequest& request, ::afs::GetAttrResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_s_getattr_, context, request, response);
}

void gRPCService::Stub::experimental_async::s_getattr(::grpc::ClientContext* context, const ::afs::PathRequest* request, ::afs::GetAttrResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_s_getattr_, context, request, response, std::move(f));
}

void gRPCService::Stub::experimental_async::s_getattr(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::afs::GetAttrResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_s_getattr_, context, request, response, std::move(f));
}

void gRPCService::Stub::experimental_async::s_getattr(::grpc::ClientContext* context, const ::afs::PathRequest* request, ::afs::GetAttrResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_s_getattr_, context, request, response, reactor);
}

void gRPCService::Stub::experimental_async::s_getattr(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::afs::GetAttrResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_s_getattr_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::afs::GetAttrResponse>* gRPCService::Stub::Asyncs_getattrRaw(::grpc::ClientContext* context, const ::afs::PathRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::afs::GetAttrResponse>::Create(channel_.get(), cq, rpcmethod_s_getattr_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::afs::GetAttrResponse>* gRPCService::Stub::PrepareAsyncs_getattrRaw(::grpc::ClientContext* context, const ::afs::PathRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::afs::GetAttrResponse>::Create(channel_.get(), cq, rpcmethod_s_getattr_, context, request, false);
}

::grpc::Status gRPCService::Stub::s_readdir(::grpc::ClientContext* context, const ::afs::PathRequest& request, ::afs::ReadDirResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_s_readdir_, context, request, response);
}

void gRPCService::Stub::experimental_async::s_readdir(::grpc::ClientContext* context, const ::afs::PathRequest* request, ::afs::ReadDirResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_s_readdir_, context, request, response, std::move(f));
}

void gRPCService::Stub::experimental_async::s_readdir(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::afs::ReadDirResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_s_readdir_, context, request, response, std::move(f));
}

void gRPCService::Stub::experimental_async::s_readdir(::grpc::ClientContext* context, const ::afs::PathRequest* request, ::afs::ReadDirResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_s_readdir_, context, request, response, reactor);
}

void gRPCService::Stub::experimental_async::s_readdir(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::afs::ReadDirResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_s_readdir_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::afs::ReadDirResponse>* gRPCService::Stub::Asyncs_readdirRaw(::grpc::ClientContext* context, const ::afs::PathRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::afs::ReadDirResponse>::Create(channel_.get(), cq, rpcmethod_s_readdir_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::afs::ReadDirResponse>* gRPCService::Stub::PrepareAsyncs_readdirRaw(::grpc::ClientContext* context, const ::afs::PathRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::afs::ReadDirResponse>::Create(channel_.get(), cq, rpcmethod_s_readdir_, context, request, false);
}

gRPCService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      gRPCService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< gRPCService::Service, ::afs::PathRequest, ::afs::GetAttrResponse>(
          std::mem_fn(&gRPCService::Service::s_getattr), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      gRPCService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< gRPCService::Service, ::afs::PathRequest, ::afs::ReadDirResponse>(
          std::mem_fn(&gRPCService::Service::s_readdir), this)));
}

gRPCService::Service::~Service() {
}

::grpc::Status gRPCService::Service::s_getattr(::grpc::ServerContext* context, const ::afs::PathRequest* request, ::afs::GetAttrResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status gRPCService::Service::s_readdir(::grpc::ServerContext* context, const ::afs::PathRequest* request, ::afs::ReadDirResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace afs

