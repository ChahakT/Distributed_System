// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: hello.proto

#include "hello.pb.h"
#include "hello.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace aafs {

static const char* gRPCService_method_names[] = {
  "/aafs.gRPCService/s_getattr",
  "/aafs.gRPCService/s_readdir",
  "/aafs.gRPCService/s_download",
  "/aafs.gRPCService/s_unlink",
  "/aafs.gRPCService/s_mkdir",
  "/aafs.gRPCService/s_rmdir",
  "/aafs.gRPCService/s_creat",
  "/aafs.gRPCService/s_rename",
};

std::unique_ptr< gRPCService::Stub> gRPCService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< gRPCService::Stub> stub(new gRPCService::Stub(channel, options));
  return stub;
}

gRPCService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_s_getattr_(gRPCService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_s_readdir_(gRPCService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_s_download_(gRPCService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_s_unlink_(gRPCService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_s_mkdir_(gRPCService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_s_rmdir_(gRPCService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_s_creat_(gRPCService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_s_rename_(gRPCService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status gRPCService::Stub::s_getattr(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::aafs::GetAttrResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::aafs::PathRequest, ::aafs::GetAttrResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_s_getattr_, context, request, response);
}

void gRPCService::Stub::async::s_getattr(::grpc::ClientContext* context, const ::aafs::PathRequest* request, ::aafs::GetAttrResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::aafs::PathRequest, ::aafs::GetAttrResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_s_getattr_, context, request, response, std::move(f));
}

void gRPCService::Stub::async::s_getattr(::grpc::ClientContext* context, const ::aafs::PathRequest* request, ::aafs::GetAttrResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_s_getattr_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::aafs::GetAttrResponse>* gRPCService::Stub::PrepareAsyncs_getattrRaw(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::aafs::GetAttrResponse, ::aafs::PathRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_s_getattr_, context, request);
}

::grpc::ClientAsyncResponseReader< ::aafs::GetAttrResponse>* gRPCService::Stub::Asyncs_getattrRaw(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncs_getattrRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status gRPCService::Stub::s_readdir(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::aafs::ReadDirResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::aafs::PathRequest, ::aafs::ReadDirResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_s_readdir_, context, request, response);
}

void gRPCService::Stub::async::s_readdir(::grpc::ClientContext* context, const ::aafs::PathRequest* request, ::aafs::ReadDirResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::aafs::PathRequest, ::aafs::ReadDirResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_s_readdir_, context, request, response, std::move(f));
}

void gRPCService::Stub::async::s_readdir(::grpc::ClientContext* context, const ::aafs::PathRequest* request, ::aafs::ReadDirResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_s_readdir_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::aafs::ReadDirResponse>* gRPCService::Stub::PrepareAsyncs_readdirRaw(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::aafs::ReadDirResponse, ::aafs::PathRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_s_readdir_, context, request);
}

::grpc::ClientAsyncResponseReader< ::aafs::ReadDirResponse>* gRPCService::Stub::Asyncs_readdirRaw(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncs_readdirRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::aafs::OpenResponse>* gRPCService::Stub::s_downloadRaw(::grpc::ClientContext* context, const ::aafs::PathRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::aafs::OpenResponse>::Create(channel_.get(), rpcmethod_s_download_, context, request);
}

void gRPCService::Stub::async::s_download(::grpc::ClientContext* context, const ::aafs::PathRequest* request, ::grpc::ClientReadReactor< ::aafs::OpenResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::aafs::OpenResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_s_download_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::aafs::OpenResponse>* gRPCService::Stub::Asyncs_downloadRaw(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::aafs::OpenResponse>::Create(channel_.get(), cq, rpcmethod_s_download_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::aafs::OpenResponse>* gRPCService::Stub::PrepareAsyncs_downloadRaw(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::aafs::OpenResponse>::Create(channel_.get(), cq, rpcmethod_s_download_, context, request, false, nullptr);
}

::grpc::Status gRPCService::Stub::s_unlink(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::aafs::StatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::aafs::PathRequest, ::aafs::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_s_unlink_, context, request, response);
}

void gRPCService::Stub::async::s_unlink(::grpc::ClientContext* context, const ::aafs::PathRequest* request, ::aafs::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::aafs::PathRequest, ::aafs::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_s_unlink_, context, request, response, std::move(f));
}

void gRPCService::Stub::async::s_unlink(::grpc::ClientContext* context, const ::aafs::PathRequest* request, ::aafs::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_s_unlink_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::aafs::StatusResponse>* gRPCService::Stub::PrepareAsyncs_unlinkRaw(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::aafs::StatusResponse, ::aafs::PathRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_s_unlink_, context, request);
}

::grpc::ClientAsyncResponseReader< ::aafs::StatusResponse>* gRPCService::Stub::Asyncs_unlinkRaw(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncs_unlinkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status gRPCService::Stub::s_mkdir(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::aafs::StatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::aafs::PathRequest, ::aafs::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_s_mkdir_, context, request, response);
}

void gRPCService::Stub::async::s_mkdir(::grpc::ClientContext* context, const ::aafs::PathRequest* request, ::aafs::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::aafs::PathRequest, ::aafs::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_s_mkdir_, context, request, response, std::move(f));
}

void gRPCService::Stub::async::s_mkdir(::grpc::ClientContext* context, const ::aafs::PathRequest* request, ::aafs::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_s_mkdir_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::aafs::StatusResponse>* gRPCService::Stub::PrepareAsyncs_mkdirRaw(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::aafs::StatusResponse, ::aafs::PathRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_s_mkdir_, context, request);
}

::grpc::ClientAsyncResponseReader< ::aafs::StatusResponse>* gRPCService::Stub::Asyncs_mkdirRaw(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncs_mkdirRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status gRPCService::Stub::s_rmdir(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::aafs::StatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::aafs::PathRequest, ::aafs::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_s_rmdir_, context, request, response);
}

void gRPCService::Stub::async::s_rmdir(::grpc::ClientContext* context, const ::aafs::PathRequest* request, ::aafs::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::aafs::PathRequest, ::aafs::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_s_rmdir_, context, request, response, std::move(f));
}

void gRPCService::Stub::async::s_rmdir(::grpc::ClientContext* context, const ::aafs::PathRequest* request, ::aafs::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_s_rmdir_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::aafs::StatusResponse>* gRPCService::Stub::PrepareAsyncs_rmdirRaw(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::aafs::StatusResponse, ::aafs::PathRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_s_rmdir_, context, request);
}

::grpc::ClientAsyncResponseReader< ::aafs::StatusResponse>* gRPCService::Stub::Asyncs_rmdirRaw(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncs_rmdirRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status gRPCService::Stub::s_creat(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::aafs::StatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::aafs::PathRequest, ::aafs::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_s_creat_, context, request, response);
}

void gRPCService::Stub::async::s_creat(::grpc::ClientContext* context, const ::aafs::PathRequest* request, ::aafs::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::aafs::PathRequest, ::aafs::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_s_creat_, context, request, response, std::move(f));
}

void gRPCService::Stub::async::s_creat(::grpc::ClientContext* context, const ::aafs::PathRequest* request, ::aafs::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_s_creat_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::aafs::StatusResponse>* gRPCService::Stub::PrepareAsyncs_creatRaw(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::aafs::StatusResponse, ::aafs::PathRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_s_creat_, context, request);
}

::grpc::ClientAsyncResponseReader< ::aafs::StatusResponse>* gRPCService::Stub::Asyncs_creatRaw(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncs_creatRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status gRPCService::Stub::s_rename(::grpc::ClientContext* context, const ::aafs::RenameRequest& request, ::aafs::StatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::aafs::RenameRequest, ::aafs::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_s_rename_, context, request, response);
}

void gRPCService::Stub::async::s_rename(::grpc::ClientContext* context, const ::aafs::RenameRequest* request, ::aafs::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::aafs::RenameRequest, ::aafs::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_s_rename_, context, request, response, std::move(f));
}

void gRPCService::Stub::async::s_rename(::grpc::ClientContext* context, const ::aafs::RenameRequest* request, ::aafs::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_s_rename_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::aafs::StatusResponse>* gRPCService::Stub::PrepareAsyncs_renameRaw(::grpc::ClientContext* context, const ::aafs::RenameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::aafs::StatusResponse, ::aafs::RenameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_s_rename_, context, request);
}

::grpc::ClientAsyncResponseReader< ::aafs::StatusResponse>* gRPCService::Stub::Asyncs_renameRaw(::grpc::ClientContext* context, const ::aafs::RenameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncs_renameRaw(context, request, cq);
  result->StartCall();
  return result;
}

gRPCService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      gRPCService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< gRPCService::Service, ::aafs::PathRequest, ::aafs::GetAttrResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](gRPCService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::aafs::PathRequest* req,
             ::aafs::GetAttrResponse* resp) {
               return service->s_getattr(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      gRPCService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< gRPCService::Service, ::aafs::PathRequest, ::aafs::ReadDirResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](gRPCService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::aafs::PathRequest* req,
             ::aafs::ReadDirResponse* resp) {
               return service->s_readdir(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      gRPCService_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< gRPCService::Service, ::aafs::PathRequest, ::aafs::OpenResponse>(
          [](gRPCService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::aafs::PathRequest* req,
             ::grpc::ServerWriter<::aafs::OpenResponse>* writer) {
               return service->s_download(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      gRPCService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< gRPCService::Service, ::aafs::PathRequest, ::aafs::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](gRPCService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::aafs::PathRequest* req,
             ::aafs::StatusResponse* resp) {
               return service->s_unlink(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      gRPCService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< gRPCService::Service, ::aafs::PathRequest, ::aafs::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](gRPCService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::aafs::PathRequest* req,
             ::aafs::StatusResponse* resp) {
               return service->s_mkdir(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      gRPCService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< gRPCService::Service, ::aafs::PathRequest, ::aafs::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](gRPCService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::aafs::PathRequest* req,
             ::aafs::StatusResponse* resp) {
               return service->s_rmdir(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      gRPCService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< gRPCService::Service, ::aafs::PathRequest, ::aafs::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](gRPCService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::aafs::PathRequest* req,
             ::aafs::StatusResponse* resp) {
               return service->s_creat(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      gRPCService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< gRPCService::Service, ::aafs::RenameRequest, ::aafs::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](gRPCService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::aafs::RenameRequest* req,
             ::aafs::StatusResponse* resp) {
               return service->s_rename(ctx, req, resp);
             }, this)));
}

gRPCService::Service::~Service() {
}

::grpc::Status gRPCService::Service::s_getattr(::grpc::ServerContext* context, const ::aafs::PathRequest* request, ::aafs::GetAttrResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status gRPCService::Service::s_readdir(::grpc::ServerContext* context, const ::aafs::PathRequest* request, ::aafs::ReadDirResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status gRPCService::Service::s_download(::grpc::ServerContext* context, const ::aafs::PathRequest* request, ::grpc::ServerWriter< ::aafs::OpenResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status gRPCService::Service::s_unlink(::grpc::ServerContext* context, const ::aafs::PathRequest* request, ::aafs::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status gRPCService::Service::s_mkdir(::grpc::ServerContext* context, const ::aafs::PathRequest* request, ::aafs::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status gRPCService::Service::s_rmdir(::grpc::ServerContext* context, const ::aafs::PathRequest* request, ::aafs::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status gRPCService::Service::s_creat(::grpc::ServerContext* context, const ::aafs::PathRequest* request, ::aafs::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status gRPCService::Service::s_rename(::grpc::ServerContext* context, const ::aafs::RenameRequest* request, ::aafs::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace aafs

