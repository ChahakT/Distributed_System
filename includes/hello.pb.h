// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hello.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_hello_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_hello_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_hello_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_hello_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hello_2eproto;
namespace aafs {
class GetAttrResponse;
struct GetAttrResponseDefaultTypeInternal;
extern GetAttrResponseDefaultTypeInternal _GetAttrResponse_default_instance_;
class MATime;
struct MATimeDefaultTypeInternal;
extern MATimeDefaultTypeInternal _MATime_default_instance_;
class OpenResponse;
struct OpenResponseDefaultTypeInternal;
extern OpenResponseDefaultTypeInternal _OpenResponse_default_instance_;
class PathRequest;
struct PathRequestDefaultTypeInternal;
extern PathRequestDefaultTypeInternal _PathRequest_default_instance_;
class ReadDirResponse;
struct ReadDirResponseDefaultTypeInternal;
extern ReadDirResponseDefaultTypeInternal _ReadDirResponse_default_instance_;
class RenameRequest;
struct RenameRequestDefaultTypeInternal;
extern RenameRequestDefaultTypeInternal _RenameRequest_default_instance_;
class Stat;
struct StatDefaultTypeInternal;
extern StatDefaultTypeInternal _Stat_default_instance_;
class StatusMatimeResponse;
struct StatusMatimeResponseDefaultTypeInternal;
extern StatusMatimeResponseDefaultTypeInternal _StatusMatimeResponse_default_instance_;
class StatusResponse;
struct StatusResponseDefaultTypeInternal;
extern StatusResponseDefaultTypeInternal _StatusResponse_default_instance_;
}  // namespace aafs
PROTOBUF_NAMESPACE_OPEN
template<> ::aafs::GetAttrResponse* Arena::CreateMaybeMessage<::aafs::GetAttrResponse>(Arena*);
template<> ::aafs::MATime* Arena::CreateMaybeMessage<::aafs::MATime>(Arena*);
template<> ::aafs::OpenResponse* Arena::CreateMaybeMessage<::aafs::OpenResponse>(Arena*);
template<> ::aafs::PathRequest* Arena::CreateMaybeMessage<::aafs::PathRequest>(Arena*);
template<> ::aafs::ReadDirResponse* Arena::CreateMaybeMessage<::aafs::ReadDirResponse>(Arena*);
template<> ::aafs::RenameRequest* Arena::CreateMaybeMessage<::aafs::RenameRequest>(Arena*);
template<> ::aafs::Stat* Arena::CreateMaybeMessage<::aafs::Stat>(Arena*);
template<> ::aafs::StatusMatimeResponse* Arena::CreateMaybeMessage<::aafs::StatusMatimeResponse>(Arena*);
template<> ::aafs::StatusResponse* Arena::CreateMaybeMessage<::aafs::StatusResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace aafs {

// ===================================================================

class Stat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aafs.Stat) */ {
 public:
  inline Stat() : Stat(nullptr) {}
  ~Stat() override;
  explicit constexpr Stat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stat(const Stat& from);
  Stat(Stat&& from) noexcept
    : Stat() {
    *this = ::std::move(from);
  }

  inline Stat& operator=(const Stat& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stat& operator=(Stat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stat& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stat* internal_default_instance() {
    return reinterpret_cast<const Stat*>(
               &_Stat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Stat& a, Stat& b) {
    a.Swap(&b);
  }
  inline void Swap(Stat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Stat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Stat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Stat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Stat& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aafs.Stat";
  }
  protected:
  explicit Stat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInoFieldNumber = 1,
    kModeFieldNumber = 2,
    kNlinkFieldNumber = 3,
    kUidFieldNumber = 4,
    kGidFieldNumber = 5,
    kRdevFieldNumber = 6,
    kSizeFieldNumber = 7,
    kBlocksFieldNumber = 8,
    kAtimeFieldNumber = 9,
    kMtimeFieldNumber = 10,
    kCtimeFieldNumber = 11,
  };
  // uint64 ino = 1;
  void clear_ino();
  uint64_t ino() const;
  void set_ino(uint64_t value);
  private:
  uint64_t _internal_ino() const;
  void _internal_set_ino(uint64_t value);
  public:

  // uint64 mode = 2;
  void clear_mode();
  uint64_t mode() const;
  void set_mode(uint64_t value);
  private:
  uint64_t _internal_mode() const;
  void _internal_set_mode(uint64_t value);
  public:

  // uint64 nlink = 3;
  void clear_nlink();
  uint64_t nlink() const;
  void set_nlink(uint64_t value);
  private:
  uint64_t _internal_nlink() const;
  void _internal_set_nlink(uint64_t value);
  public:

  // uint64 uid = 4;
  void clear_uid();
  uint64_t uid() const;
  void set_uid(uint64_t value);
  private:
  uint64_t _internal_uid() const;
  void _internal_set_uid(uint64_t value);
  public:

  // uint64 gid = 5;
  void clear_gid();
  uint64_t gid() const;
  void set_gid(uint64_t value);
  private:
  uint64_t _internal_gid() const;
  void _internal_set_gid(uint64_t value);
  public:

  // uint64 rdev = 6;
  void clear_rdev();
  uint64_t rdev() const;
  void set_rdev(uint64_t value);
  private:
  uint64_t _internal_rdev() const;
  void _internal_set_rdev(uint64_t value);
  public:

  // int64 size = 7;
  void clear_size();
  int64_t size() const;
  void set_size(int64_t value);
  private:
  int64_t _internal_size() const;
  void _internal_set_size(int64_t value);
  public:

  // int64 blocks = 8;
  void clear_blocks();
  int64_t blocks() const;
  void set_blocks(int64_t value);
  private:
  int64_t _internal_blocks() const;
  void _internal_set_blocks(int64_t value);
  public:

  // int64 atime = 9;
  void clear_atime();
  int64_t atime() const;
  void set_atime(int64_t value);
  private:
  int64_t _internal_atime() const;
  void _internal_set_atime(int64_t value);
  public:

  // int64 mtime = 10;
  void clear_mtime();
  int64_t mtime() const;
  void set_mtime(int64_t value);
  private:
  int64_t _internal_mtime() const;
  void _internal_set_mtime(int64_t value);
  public:

  // int64 ctime = 11;
  void clear_ctime();
  int64_t ctime() const;
  void set_ctime(int64_t value);
  private:
  int64_t _internal_ctime() const;
  void _internal_set_ctime(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:aafs.Stat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t ino_;
  uint64_t mode_;
  uint64_t nlink_;
  uint64_t uid_;
  uint64_t gid_;
  uint64_t rdev_;
  int64_t size_;
  int64_t blocks_;
  int64_t atime_;
  int64_t mtime_;
  int64_t ctime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hello_2eproto;
};
// -------------------------------------------------------------------

class PathRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aafs.PathRequest) */ {
 public:
  inline PathRequest() : PathRequest(nullptr) {}
  ~PathRequest() override;
  explicit constexpr PathRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PathRequest(const PathRequest& from);
  PathRequest(PathRequest&& from) noexcept
    : PathRequest() {
    *this = ::std::move(from);
  }

  inline PathRequest& operator=(const PathRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PathRequest& operator=(PathRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PathRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PathRequest* internal_default_instance() {
    return reinterpret_cast<const PathRequest*>(
               &_PathRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PathRequest& a, PathRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PathRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PathRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PathRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PathRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PathRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PathRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aafs.PathRequest";
  }
  protected:
  explicit PathRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:aafs.PathRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hello_2eproto;
};
// -------------------------------------------------------------------

class RenameRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aafs.RenameRequest) */ {
 public:
  inline RenameRequest() : RenameRequest(nullptr) {}
  ~RenameRequest() override;
  explicit constexpr RenameRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RenameRequest(const RenameRequest& from);
  RenameRequest(RenameRequest&& from) noexcept
    : RenameRequest() {
    *this = ::std::move(from);
  }

  inline RenameRequest& operator=(const RenameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenameRequest& operator=(RenameRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RenameRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RenameRequest* internal_default_instance() {
    return reinterpret_cast<const RenameRequest*>(
               &_RenameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RenameRequest& a, RenameRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RenameRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RenameRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RenameRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RenameRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RenameRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RenameRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenameRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aafs.RenameRequest";
  }
  protected:
  explicit RenameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldpathFieldNumber = 1,
    kNewpathFieldNumber = 2,
  };
  // string oldpath = 1;
  void clear_oldpath();
  const std::string& oldpath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_oldpath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_oldpath();
  PROTOBUF_NODISCARD std::string* release_oldpath();
  void set_allocated_oldpath(std::string* oldpath);
  private:
  const std::string& _internal_oldpath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_oldpath(const std::string& value);
  std::string* _internal_mutable_oldpath();
  public:

  // string newpath = 2;
  void clear_newpath();
  const std::string& newpath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_newpath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_newpath();
  PROTOBUF_NODISCARD std::string* release_newpath();
  void set_allocated_newpath(std::string* newpath);
  private:
  const std::string& _internal_newpath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_newpath(const std::string& value);
  std::string* _internal_mutable_newpath();
  public:

  // @@protoc_insertion_point(class_scope:aafs.RenameRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oldpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newpath_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hello_2eproto;
};
// -------------------------------------------------------------------

class GetAttrResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aafs.GetAttrResponse) */ {
 public:
  inline GetAttrResponse() : GetAttrResponse(nullptr) {}
  ~GetAttrResponse() override;
  explicit constexpr GetAttrResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAttrResponse(const GetAttrResponse& from);
  GetAttrResponse(GetAttrResponse&& from) noexcept
    : GetAttrResponse() {
    *this = ::std::move(from);
  }

  inline GetAttrResponse& operator=(const GetAttrResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAttrResponse& operator=(GetAttrResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAttrResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAttrResponse* internal_default_instance() {
    return reinterpret_cast<const GetAttrResponse*>(
               &_GetAttrResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetAttrResponse& a, GetAttrResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAttrResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAttrResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAttrResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAttrResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAttrResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetAttrResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAttrResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aafs.GetAttrResponse";
  }
  protected:
  explicit GetAttrResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatFieldNumber = 2,
    kRetFieldNumber = 1,
  };
  // .aafs.Stat stat = 2;
  bool has_stat() const;
  private:
  bool _internal_has_stat() const;
  public:
  void clear_stat();
  const ::aafs::Stat& stat() const;
  PROTOBUF_NODISCARD ::aafs::Stat* release_stat();
  ::aafs::Stat* mutable_stat();
  void set_allocated_stat(::aafs::Stat* stat);
  private:
  const ::aafs::Stat& _internal_stat() const;
  ::aafs::Stat* _internal_mutable_stat();
  public:
  void unsafe_arena_set_allocated_stat(
      ::aafs::Stat* stat);
  ::aafs::Stat* unsafe_arena_release_stat();

  // int32 ret = 1;
  void clear_ret();
  int32_t ret() const;
  void set_ret(int32_t value);
  private:
  int32_t _internal_ret() const;
  void _internal_set_ret(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:aafs.GetAttrResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::aafs::Stat* stat_;
  int32_t ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hello_2eproto;
};
// -------------------------------------------------------------------

class ReadDirResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aafs.ReadDirResponse) */ {
 public:
  inline ReadDirResponse() : ReadDirResponse(nullptr) {}
  ~ReadDirResponse() override;
  explicit constexpr ReadDirResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadDirResponse(const ReadDirResponse& from);
  ReadDirResponse(ReadDirResponse&& from) noexcept
    : ReadDirResponse() {
    *this = ::std::move(from);
  }

  inline ReadDirResponse& operator=(const ReadDirResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadDirResponse& operator=(ReadDirResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadDirResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadDirResponse* internal_default_instance() {
    return reinterpret_cast<const ReadDirResponse*>(
               &_ReadDirResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ReadDirResponse& a, ReadDirResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadDirResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadDirResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadDirResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadDirResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadDirResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReadDirResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadDirResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aafs.ReadDirResponse";
  }
  protected:
  explicit ReadDirResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 2,
    kRetFieldNumber = 1,
  };
  // repeated string entries = 2;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  const std::string& entries(int index) const;
  std::string* mutable_entries(int index);
  void set_entries(int index, const std::string& value);
  void set_entries(int index, std::string&& value);
  void set_entries(int index, const char* value);
  void set_entries(int index, const char* value, size_t size);
  std::string* add_entries();
  void add_entries(const std::string& value);
  void add_entries(std::string&& value);
  void add_entries(const char* value);
  void add_entries(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& entries() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_entries();
  private:
  const std::string& _internal_entries(int index) const;
  std::string* _internal_add_entries();
  public:

  // int32 ret = 1;
  void clear_ret();
  int32_t ret() const;
  void set_ret(int32_t value);
  private:
  int32_t _internal_ret() const;
  void _internal_set_ret(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:aafs.ReadDirResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> entries_;
  int32_t ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hello_2eproto;
};
// -------------------------------------------------------------------

class OpenResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aafs.OpenResponse) */ {
 public:
  inline OpenResponse() : OpenResponse(nullptr) {}
  ~OpenResponse() override;
  explicit constexpr OpenResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OpenResponse(const OpenResponse& from);
  OpenResponse(OpenResponse&& from) noexcept
    : OpenResponse() {
    *this = ::std::move(from);
  }

  inline OpenResponse& operator=(const OpenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenResponse& operator=(OpenResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpenResponse& default_instance() {
    return *internal_default_instance();
  }
  enum TestOneofCase {
    kTime = 1,
    kData = 2,
    TEST_ONEOF_NOT_SET = 0,
  };

  static inline const OpenResponse* internal_default_instance() {
    return reinterpret_cast<const OpenResponse*>(
               &_OpenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(OpenResponse& a, OpenResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpenResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OpenResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OpenResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OpenResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OpenResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aafs.OpenResponse";
  }
  protected:
  explicit OpenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // .aafs.MATime time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const ::aafs::MATime& time() const;
  PROTOBUF_NODISCARD ::aafs::MATime* release_time();
  ::aafs::MATime* mutable_time();
  void set_allocated_time(::aafs::MATime* time);
  private:
  const ::aafs::MATime& _internal_time() const;
  ::aafs::MATime* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::aafs::MATime* time);
  ::aafs::MATime* unsafe_arena_release_time();

  // bytes data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  void clear_test_oneof();
  TestOneofCase test_oneof_case() const;
  // @@protoc_insertion_point(class_scope:aafs.OpenResponse)
 private:
  class _Internal;
  void set_has_time();
  void set_has_data();

  inline bool has_test_oneof() const;
  inline void clear_has_test_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union TestOneofUnion {
    constexpr TestOneofUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::aafs::MATime* time_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  } test_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_hello_2eproto;
};
// -------------------------------------------------------------------

class StatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aafs.StatusResponse) */ {
 public:
  inline StatusResponse() : StatusResponse(nullptr) {}
  ~StatusResponse() override;
  explicit constexpr StatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatusResponse(const StatusResponse& from);
  StatusResponse(StatusResponse&& from) noexcept
    : StatusResponse() {
    *this = ::std::move(from);
  }

  inline StatusResponse& operator=(const StatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusResponse& operator=(StatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatusResponse* internal_default_instance() {
    return reinterpret_cast<const StatusResponse*>(
               &_StatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(StatusResponse& a, StatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StatusResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aafs.StatusResponse";
  }
  protected:
  explicit StatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetFieldNumber = 1,
  };
  // int32 ret = 1;
  void clear_ret();
  int32_t ret() const;
  void set_ret(int32_t value);
  private:
  int32_t _internal_ret() const;
  void _internal_set_ret(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:aafs.StatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hello_2eproto;
};
// -------------------------------------------------------------------

class StatusMatimeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aafs.StatusMatimeResponse) */ {
 public:
  inline StatusMatimeResponse() : StatusMatimeResponse(nullptr) {}
  ~StatusMatimeResponse() override;
  explicit constexpr StatusMatimeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatusMatimeResponse(const StatusMatimeResponse& from);
  StatusMatimeResponse(StatusMatimeResponse&& from) noexcept
    : StatusMatimeResponse() {
    *this = ::std::move(from);
  }

  inline StatusMatimeResponse& operator=(const StatusMatimeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusMatimeResponse& operator=(StatusMatimeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatusMatimeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatusMatimeResponse* internal_default_instance() {
    return reinterpret_cast<const StatusMatimeResponse*>(
               &_StatusMatimeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(StatusMatimeResponse& a, StatusMatimeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusMatimeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusMatimeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatusMatimeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatusMatimeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatusMatimeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StatusMatimeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusMatimeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aafs.StatusMatimeResponse";
  }
  protected:
  explicit StatusMatimeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatimeFieldNumber = 2,
    kRetFieldNumber = 1,
  };
  // .aafs.MATime matime = 2;
  bool has_matime() const;
  private:
  bool _internal_has_matime() const;
  public:
  void clear_matime();
  const ::aafs::MATime& matime() const;
  PROTOBUF_NODISCARD ::aafs::MATime* release_matime();
  ::aafs::MATime* mutable_matime();
  void set_allocated_matime(::aafs::MATime* matime);
  private:
  const ::aafs::MATime& _internal_matime() const;
  ::aafs::MATime* _internal_mutable_matime();
  public:
  void unsafe_arena_set_allocated_matime(
      ::aafs::MATime* matime);
  ::aafs::MATime* unsafe_arena_release_matime();

  // uint32 ret = 1;
  void clear_ret();
  uint32_t ret() const;
  void set_ret(uint32_t value);
  private:
  uint32_t _internal_ret() const;
  void _internal_set_ret(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:aafs.StatusMatimeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::aafs::MATime* matime_;
  uint32_t ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hello_2eproto;
};
// -------------------------------------------------------------------

class MATime final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aafs.MATime) */ {
 public:
  inline MATime() : MATime(nullptr) {}
  ~MATime() override;
  explicit constexpr MATime(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MATime(const MATime& from);
  MATime(MATime&& from) noexcept
    : MATime() {
    *this = ::std::move(from);
  }

  inline MATime& operator=(const MATime& from) {
    CopyFrom(from);
    return *this;
  }
  inline MATime& operator=(MATime&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MATime& default_instance() {
    return *internal_default_instance();
  }
  static inline const MATime* internal_default_instance() {
    return reinterpret_cast<const MATime*>(
               &_MATime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MATime& a, MATime& b) {
    a.Swap(&b);
  }
  inline void Swap(MATime* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MATime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MATime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MATime>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MATime& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MATime& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MATime* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aafs.MATime";
  }
  protected:
  explicit MATime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAtimeFieldNumber = 1,
    kMtimeFieldNumber = 2,
  };
  // int64 atime = 1;
  void clear_atime();
  int64_t atime() const;
  void set_atime(int64_t value);
  private:
  int64_t _internal_atime() const;
  void _internal_set_atime(int64_t value);
  public:

  // int64 mtime = 2;
  void clear_mtime();
  int64_t mtime() const;
  void set_mtime(int64_t value);
  private:
  int64_t _internal_mtime() const;
  void _internal_set_mtime(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:aafs.MATime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t atime_;
  int64_t mtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hello_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Stat

// uint64 ino = 1;
inline void Stat::clear_ino() {
  ino_ = uint64_t{0u};
}
inline uint64_t Stat::_internal_ino() const {
  return ino_;
}
inline uint64_t Stat::ino() const {
  // @@protoc_insertion_point(field_get:aafs.Stat.ino)
  return _internal_ino();
}
inline void Stat::_internal_set_ino(uint64_t value) {
  
  ino_ = value;
}
inline void Stat::set_ino(uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:aafs.Stat.ino)
}

// uint64 mode = 2;
inline void Stat::clear_mode() {
  mode_ = uint64_t{0u};
}
inline uint64_t Stat::_internal_mode() const {
  return mode_;
}
inline uint64_t Stat::mode() const {
  // @@protoc_insertion_point(field_get:aafs.Stat.mode)
  return _internal_mode();
}
inline void Stat::_internal_set_mode(uint64_t value) {
  
  mode_ = value;
}
inline void Stat::set_mode(uint64_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:aafs.Stat.mode)
}

// uint64 nlink = 3;
inline void Stat::clear_nlink() {
  nlink_ = uint64_t{0u};
}
inline uint64_t Stat::_internal_nlink() const {
  return nlink_;
}
inline uint64_t Stat::nlink() const {
  // @@protoc_insertion_point(field_get:aafs.Stat.nlink)
  return _internal_nlink();
}
inline void Stat::_internal_set_nlink(uint64_t value) {
  
  nlink_ = value;
}
inline void Stat::set_nlink(uint64_t value) {
  _internal_set_nlink(value);
  // @@protoc_insertion_point(field_set:aafs.Stat.nlink)
}

// uint64 uid = 4;
inline void Stat::clear_uid() {
  uid_ = uint64_t{0u};
}
inline uint64_t Stat::_internal_uid() const {
  return uid_;
}
inline uint64_t Stat::uid() const {
  // @@protoc_insertion_point(field_get:aafs.Stat.uid)
  return _internal_uid();
}
inline void Stat::_internal_set_uid(uint64_t value) {
  
  uid_ = value;
}
inline void Stat::set_uid(uint64_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:aafs.Stat.uid)
}

// uint64 gid = 5;
inline void Stat::clear_gid() {
  gid_ = uint64_t{0u};
}
inline uint64_t Stat::_internal_gid() const {
  return gid_;
}
inline uint64_t Stat::gid() const {
  // @@protoc_insertion_point(field_get:aafs.Stat.gid)
  return _internal_gid();
}
inline void Stat::_internal_set_gid(uint64_t value) {
  
  gid_ = value;
}
inline void Stat::set_gid(uint64_t value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:aafs.Stat.gid)
}

// uint64 rdev = 6;
inline void Stat::clear_rdev() {
  rdev_ = uint64_t{0u};
}
inline uint64_t Stat::_internal_rdev() const {
  return rdev_;
}
inline uint64_t Stat::rdev() const {
  // @@protoc_insertion_point(field_get:aafs.Stat.rdev)
  return _internal_rdev();
}
inline void Stat::_internal_set_rdev(uint64_t value) {
  
  rdev_ = value;
}
inline void Stat::set_rdev(uint64_t value) {
  _internal_set_rdev(value);
  // @@protoc_insertion_point(field_set:aafs.Stat.rdev)
}

// int64 size = 7;
inline void Stat::clear_size() {
  size_ = int64_t{0};
}
inline int64_t Stat::_internal_size() const {
  return size_;
}
inline int64_t Stat::size() const {
  // @@protoc_insertion_point(field_get:aafs.Stat.size)
  return _internal_size();
}
inline void Stat::_internal_set_size(int64_t value) {
  
  size_ = value;
}
inline void Stat::set_size(int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:aafs.Stat.size)
}

// int64 blocks = 8;
inline void Stat::clear_blocks() {
  blocks_ = int64_t{0};
}
inline int64_t Stat::_internal_blocks() const {
  return blocks_;
}
inline int64_t Stat::blocks() const {
  // @@protoc_insertion_point(field_get:aafs.Stat.blocks)
  return _internal_blocks();
}
inline void Stat::_internal_set_blocks(int64_t value) {
  
  blocks_ = value;
}
inline void Stat::set_blocks(int64_t value) {
  _internal_set_blocks(value);
  // @@protoc_insertion_point(field_set:aafs.Stat.blocks)
}

// int64 atime = 9;
inline void Stat::clear_atime() {
  atime_ = int64_t{0};
}
inline int64_t Stat::_internal_atime() const {
  return atime_;
}
inline int64_t Stat::atime() const {
  // @@protoc_insertion_point(field_get:aafs.Stat.atime)
  return _internal_atime();
}
inline void Stat::_internal_set_atime(int64_t value) {
  
  atime_ = value;
}
inline void Stat::set_atime(int64_t value) {
  _internal_set_atime(value);
  // @@protoc_insertion_point(field_set:aafs.Stat.atime)
}

// int64 mtime = 10;
inline void Stat::clear_mtime() {
  mtime_ = int64_t{0};
}
inline int64_t Stat::_internal_mtime() const {
  return mtime_;
}
inline int64_t Stat::mtime() const {
  // @@protoc_insertion_point(field_get:aafs.Stat.mtime)
  return _internal_mtime();
}
inline void Stat::_internal_set_mtime(int64_t value) {
  
  mtime_ = value;
}
inline void Stat::set_mtime(int64_t value) {
  _internal_set_mtime(value);
  // @@protoc_insertion_point(field_set:aafs.Stat.mtime)
}

// int64 ctime = 11;
inline void Stat::clear_ctime() {
  ctime_ = int64_t{0};
}
inline int64_t Stat::_internal_ctime() const {
  return ctime_;
}
inline int64_t Stat::ctime() const {
  // @@protoc_insertion_point(field_get:aafs.Stat.ctime)
  return _internal_ctime();
}
inline void Stat::_internal_set_ctime(int64_t value) {
  
  ctime_ = value;
}
inline void Stat::set_ctime(int64_t value) {
  _internal_set_ctime(value);
  // @@protoc_insertion_point(field_set:aafs.Stat.ctime)
}

// -------------------------------------------------------------------

// PathRequest

// string path = 1;
inline void PathRequest::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& PathRequest::path() const {
  // @@protoc_insertion_point(field_get:aafs.PathRequest.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PathRequest::set_path(ArgT0&& arg0, ArgT... args) {
 
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:aafs.PathRequest.path)
}
inline std::string* PathRequest::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:aafs.PathRequest.path)
  return _s;
}
inline const std::string& PathRequest::_internal_path() const {
  return path_.Get();
}
inline void PathRequest::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PathRequest::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PathRequest::release_path() {
  // @@protoc_insertion_point(field_release:aafs.PathRequest.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PathRequest::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aafs.PathRequest.path)
}

// -------------------------------------------------------------------

// RenameRequest

// string oldpath = 1;
inline void RenameRequest::clear_oldpath() {
  oldpath_.ClearToEmpty();
}
inline const std::string& RenameRequest::oldpath() const {
  // @@protoc_insertion_point(field_get:aafs.RenameRequest.oldpath)
  return _internal_oldpath();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RenameRequest::set_oldpath(ArgT0&& arg0, ArgT... args) {
 
 oldpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:aafs.RenameRequest.oldpath)
}
inline std::string* RenameRequest::mutable_oldpath() {
  std::string* _s = _internal_mutable_oldpath();
  // @@protoc_insertion_point(field_mutable:aafs.RenameRequest.oldpath)
  return _s;
}
inline const std::string& RenameRequest::_internal_oldpath() const {
  return oldpath_.Get();
}
inline void RenameRequest::_internal_set_oldpath(const std::string& value) {
  
  oldpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RenameRequest::_internal_mutable_oldpath() {
  
  return oldpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RenameRequest::release_oldpath() {
  // @@protoc_insertion_point(field_release:aafs.RenameRequest.oldpath)
  return oldpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RenameRequest::set_allocated_oldpath(std::string* oldpath) {
  if (oldpath != nullptr) {
    
  } else {
    
  }
  oldpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), oldpath,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (oldpath_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    oldpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aafs.RenameRequest.oldpath)
}

// string newpath = 2;
inline void RenameRequest::clear_newpath() {
  newpath_.ClearToEmpty();
}
inline const std::string& RenameRequest::newpath() const {
  // @@protoc_insertion_point(field_get:aafs.RenameRequest.newpath)
  return _internal_newpath();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RenameRequest::set_newpath(ArgT0&& arg0, ArgT... args) {
 
 newpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:aafs.RenameRequest.newpath)
}
inline std::string* RenameRequest::mutable_newpath() {
  std::string* _s = _internal_mutable_newpath();
  // @@protoc_insertion_point(field_mutable:aafs.RenameRequest.newpath)
  return _s;
}
inline const std::string& RenameRequest::_internal_newpath() const {
  return newpath_.Get();
}
inline void RenameRequest::_internal_set_newpath(const std::string& value) {
  
  newpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RenameRequest::_internal_mutable_newpath() {
  
  return newpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RenameRequest::release_newpath() {
  // @@protoc_insertion_point(field_release:aafs.RenameRequest.newpath)
  return newpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RenameRequest::set_allocated_newpath(std::string* newpath) {
  if (newpath != nullptr) {
    
  } else {
    
  }
  newpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), newpath,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (newpath_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    newpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aafs.RenameRequest.newpath)
}

// -------------------------------------------------------------------

// GetAttrResponse

// int32 ret = 1;
inline void GetAttrResponse::clear_ret() {
  ret_ = 0;
}
inline int32_t GetAttrResponse::_internal_ret() const {
  return ret_;
}
inline int32_t GetAttrResponse::ret() const {
  // @@protoc_insertion_point(field_get:aafs.GetAttrResponse.ret)
  return _internal_ret();
}
inline void GetAttrResponse::_internal_set_ret(int32_t value) {
  
  ret_ = value;
}
inline void GetAttrResponse::set_ret(int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:aafs.GetAttrResponse.ret)
}

// .aafs.Stat stat = 2;
inline bool GetAttrResponse::_internal_has_stat() const {
  return this != internal_default_instance() && stat_ != nullptr;
}
inline bool GetAttrResponse::has_stat() const {
  return _internal_has_stat();
}
inline void GetAttrResponse::clear_stat() {
  if (GetArenaForAllocation() == nullptr && stat_ != nullptr) {
    delete stat_;
  }
  stat_ = nullptr;
}
inline const ::aafs::Stat& GetAttrResponse::_internal_stat() const {
  const ::aafs::Stat* p = stat_;
  return p != nullptr ? *p : reinterpret_cast<const ::aafs::Stat&>(
      ::aafs::_Stat_default_instance_);
}
inline const ::aafs::Stat& GetAttrResponse::stat() const {
  // @@protoc_insertion_point(field_get:aafs.GetAttrResponse.stat)
  return _internal_stat();
}
inline void GetAttrResponse::unsafe_arena_set_allocated_stat(
    ::aafs::Stat* stat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stat_);
  }
  stat_ = stat;
  if (stat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aafs.GetAttrResponse.stat)
}
inline ::aafs::Stat* GetAttrResponse::release_stat() {
  
  ::aafs::Stat* temp = stat_;
  stat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aafs::Stat* GetAttrResponse::unsafe_arena_release_stat() {
  // @@protoc_insertion_point(field_release:aafs.GetAttrResponse.stat)
  
  ::aafs::Stat* temp = stat_;
  stat_ = nullptr;
  return temp;
}
inline ::aafs::Stat* GetAttrResponse::_internal_mutable_stat() {
  
  if (stat_ == nullptr) {
    auto* p = CreateMaybeMessage<::aafs::Stat>(GetArenaForAllocation());
    stat_ = p;
  }
  return stat_;
}
inline ::aafs::Stat* GetAttrResponse::mutable_stat() {
  ::aafs::Stat* _msg = _internal_mutable_stat();
  // @@protoc_insertion_point(field_mutable:aafs.GetAttrResponse.stat)
  return _msg;
}
inline void GetAttrResponse::set_allocated_stat(::aafs::Stat* stat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete stat_;
  }
  if (stat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::aafs::Stat>::GetOwningArena(stat);
    if (message_arena != submessage_arena) {
      stat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stat, submessage_arena);
    }
    
  } else {
    
  }
  stat_ = stat;
  // @@protoc_insertion_point(field_set_allocated:aafs.GetAttrResponse.stat)
}

// -------------------------------------------------------------------

// ReadDirResponse

// int32 ret = 1;
inline void ReadDirResponse::clear_ret() {
  ret_ = 0;
}
inline int32_t ReadDirResponse::_internal_ret() const {
  return ret_;
}
inline int32_t ReadDirResponse::ret() const {
  // @@protoc_insertion_point(field_get:aafs.ReadDirResponse.ret)
  return _internal_ret();
}
inline void ReadDirResponse::_internal_set_ret(int32_t value) {
  
  ret_ = value;
}
inline void ReadDirResponse::set_ret(int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:aafs.ReadDirResponse.ret)
}

// repeated string entries = 2;
inline int ReadDirResponse::_internal_entries_size() const {
  return entries_.size();
}
inline int ReadDirResponse::entries_size() const {
  return _internal_entries_size();
}
inline void ReadDirResponse::clear_entries() {
  entries_.Clear();
}
inline std::string* ReadDirResponse::add_entries() {
  std::string* _s = _internal_add_entries();
  // @@protoc_insertion_point(field_add_mutable:aafs.ReadDirResponse.entries)
  return _s;
}
inline const std::string& ReadDirResponse::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const std::string& ReadDirResponse::entries(int index) const {
  // @@protoc_insertion_point(field_get:aafs.ReadDirResponse.entries)
  return _internal_entries(index);
}
inline std::string* ReadDirResponse::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:aafs.ReadDirResponse.entries)
  return entries_.Mutable(index);
}
inline void ReadDirResponse::set_entries(int index, const std::string& value) {
  entries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:aafs.ReadDirResponse.entries)
}
inline void ReadDirResponse::set_entries(int index, std::string&& value) {
  entries_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:aafs.ReadDirResponse.entries)
}
inline void ReadDirResponse::set_entries(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  entries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:aafs.ReadDirResponse.entries)
}
inline void ReadDirResponse::set_entries(int index, const char* value, size_t size) {
  entries_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aafs.ReadDirResponse.entries)
}
inline std::string* ReadDirResponse::_internal_add_entries() {
  return entries_.Add();
}
inline void ReadDirResponse::add_entries(const std::string& value) {
  entries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:aafs.ReadDirResponse.entries)
}
inline void ReadDirResponse::add_entries(std::string&& value) {
  entries_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:aafs.ReadDirResponse.entries)
}
inline void ReadDirResponse::add_entries(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  entries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:aafs.ReadDirResponse.entries)
}
inline void ReadDirResponse::add_entries(const char* value, size_t size) {
  entries_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:aafs.ReadDirResponse.entries)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReadDirResponse::entries() const {
  // @@protoc_insertion_point(field_list:aafs.ReadDirResponse.entries)
  return entries_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ReadDirResponse::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:aafs.ReadDirResponse.entries)
  return &entries_;
}

// -------------------------------------------------------------------

// OpenResponse

// .aafs.MATime time = 1;
inline bool OpenResponse::_internal_has_time() const {
  return test_oneof_case() == kTime;
}
inline bool OpenResponse::has_time() const {
  return _internal_has_time();
}
inline void OpenResponse::set_has_time() {
  _oneof_case_[0] = kTime;
}
inline void OpenResponse::clear_time() {
  if (_internal_has_time()) {
    if (GetArenaForAllocation() == nullptr) {
      delete test_oneof_.time_;
    }
    clear_has_test_oneof();
  }
}
inline ::aafs::MATime* OpenResponse::release_time() {
  // @@protoc_insertion_point(field_release:aafs.OpenResponse.time)
  if (_internal_has_time()) {
    clear_has_test_oneof();
      ::aafs::MATime* temp = test_oneof_.time_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    test_oneof_.time_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aafs::MATime& OpenResponse::_internal_time() const {
  return _internal_has_time()
      ? *test_oneof_.time_
      : reinterpret_cast< ::aafs::MATime&>(::aafs::_MATime_default_instance_);
}
inline const ::aafs::MATime& OpenResponse::time() const {
  // @@protoc_insertion_point(field_get:aafs.OpenResponse.time)
  return _internal_time();
}
inline ::aafs::MATime* OpenResponse::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aafs.OpenResponse.time)
  if (_internal_has_time()) {
    clear_has_test_oneof();
    ::aafs::MATime* temp = test_oneof_.time_;
    test_oneof_.time_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OpenResponse::unsafe_arena_set_allocated_time(::aafs::MATime* time) {
  clear_test_oneof();
  if (time) {
    set_has_time();
    test_oneof_.time_ = time;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aafs.OpenResponse.time)
}
inline ::aafs::MATime* OpenResponse::_internal_mutable_time() {
  if (!_internal_has_time()) {
    clear_test_oneof();
    set_has_time();
    test_oneof_.time_ = CreateMaybeMessage< ::aafs::MATime >(GetArenaForAllocation());
  }
  return test_oneof_.time_;
}
inline ::aafs::MATime* OpenResponse::mutable_time() {
  ::aafs::MATime* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:aafs.OpenResponse.time)
  return _msg;
}

// bytes data = 2;
inline bool OpenResponse::_internal_has_data() const {
  return test_oneof_case() == kData;
}
inline bool OpenResponse::has_data() const {
  return _internal_has_data();
}
inline void OpenResponse::set_has_data() {
  _oneof_case_[0] = kData;
}
inline void OpenResponse::clear_data() {
  if (_internal_has_data()) {
    test_oneof_.data_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_test_oneof();
  }
}
inline const std::string& OpenResponse::data() const {
  // @@protoc_insertion_point(field_get:aafs.OpenResponse.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline void OpenResponse::set_data(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_data()) {
    clear_test_oneof();
    set_has_data();
    test_oneof_.data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  test_oneof_.data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:aafs.OpenResponse.data)
}
inline std::string* OpenResponse::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:aafs.OpenResponse.data)
  return _s;
}
inline const std::string& OpenResponse::_internal_data() const {
  if (_internal_has_data()) {
    return test_oneof_.data_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void OpenResponse::_internal_set_data(const std::string& value) {
  if (!_internal_has_data()) {
    clear_test_oneof();
    set_has_data();
    test_oneof_.data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  test_oneof_.data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpenResponse::_internal_mutable_data() {
  if (!_internal_has_data()) {
    clear_test_oneof();
    set_has_data();
    test_oneof_.data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return test_oneof_.data_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpenResponse::release_data() {
  // @@protoc_insertion_point(field_release:aafs.OpenResponse.data)
  if (_internal_has_data()) {
    clear_has_test_oneof();
    return test_oneof_.data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void OpenResponse::set_allocated_data(std::string* data) {
  if (has_test_oneof()) {
    clear_test_oneof();
  }
  if (data != nullptr) {
    set_has_data();
    test_oneof_.data_.UnsafeSetDefault(data);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(data);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:aafs.OpenResponse.data)
}

inline bool OpenResponse::has_test_oneof() const {
  return test_oneof_case() != TEST_ONEOF_NOT_SET;
}
inline void OpenResponse::clear_has_test_oneof() {
  _oneof_case_[0] = TEST_ONEOF_NOT_SET;
}
inline OpenResponse::TestOneofCase OpenResponse::test_oneof_case() const {
  return OpenResponse::TestOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// StatusResponse

// int32 ret = 1;
inline void StatusResponse::clear_ret() {
  ret_ = 0;
}
inline int32_t StatusResponse::_internal_ret() const {
  return ret_;
}
inline int32_t StatusResponse::ret() const {
  // @@protoc_insertion_point(field_get:aafs.StatusResponse.ret)
  return _internal_ret();
}
inline void StatusResponse::_internal_set_ret(int32_t value) {
  
  ret_ = value;
}
inline void StatusResponse::set_ret(int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:aafs.StatusResponse.ret)
}

// -------------------------------------------------------------------

// StatusMatimeResponse

// uint32 ret = 1;
inline void StatusMatimeResponse::clear_ret() {
  ret_ = 0u;
}
inline uint32_t StatusMatimeResponse::_internal_ret() const {
  return ret_;
}
inline uint32_t StatusMatimeResponse::ret() const {
  // @@protoc_insertion_point(field_get:aafs.StatusMatimeResponse.ret)
  return _internal_ret();
}
inline void StatusMatimeResponse::_internal_set_ret(uint32_t value) {
  
  ret_ = value;
}
inline void StatusMatimeResponse::set_ret(uint32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:aafs.StatusMatimeResponse.ret)
}

// .aafs.MATime matime = 2;
inline bool StatusMatimeResponse::_internal_has_matime() const {
  return this != internal_default_instance() && matime_ != nullptr;
}
inline bool StatusMatimeResponse::has_matime() const {
  return _internal_has_matime();
}
inline void StatusMatimeResponse::clear_matime() {
  if (GetArenaForAllocation() == nullptr && matime_ != nullptr) {
    delete matime_;
  }
  matime_ = nullptr;
}
inline const ::aafs::MATime& StatusMatimeResponse::_internal_matime() const {
  const ::aafs::MATime* p = matime_;
  return p != nullptr ? *p : reinterpret_cast<const ::aafs::MATime&>(
      ::aafs::_MATime_default_instance_);
}
inline const ::aafs::MATime& StatusMatimeResponse::matime() const {
  // @@protoc_insertion_point(field_get:aafs.StatusMatimeResponse.matime)
  return _internal_matime();
}
inline void StatusMatimeResponse::unsafe_arena_set_allocated_matime(
    ::aafs::MATime* matime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(matime_);
  }
  matime_ = matime;
  if (matime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aafs.StatusMatimeResponse.matime)
}
inline ::aafs::MATime* StatusMatimeResponse::release_matime() {
  
  ::aafs::MATime* temp = matime_;
  matime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aafs::MATime* StatusMatimeResponse::unsafe_arena_release_matime() {
  // @@protoc_insertion_point(field_release:aafs.StatusMatimeResponse.matime)
  
  ::aafs::MATime* temp = matime_;
  matime_ = nullptr;
  return temp;
}
inline ::aafs::MATime* StatusMatimeResponse::_internal_mutable_matime() {
  
  if (matime_ == nullptr) {
    auto* p = CreateMaybeMessage<::aafs::MATime>(GetArenaForAllocation());
    matime_ = p;
  }
  return matime_;
}
inline ::aafs::MATime* StatusMatimeResponse::mutable_matime() {
  ::aafs::MATime* _msg = _internal_mutable_matime();
  // @@protoc_insertion_point(field_mutable:aafs.StatusMatimeResponse.matime)
  return _msg;
}
inline void StatusMatimeResponse::set_allocated_matime(::aafs::MATime* matime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete matime_;
  }
  if (matime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::aafs::MATime>::GetOwningArena(matime);
    if (message_arena != submessage_arena) {
      matime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, matime, submessage_arena);
    }
    
  } else {
    
  }
  matime_ = matime;
  // @@protoc_insertion_point(field_set_allocated:aafs.StatusMatimeResponse.matime)
}

// -------------------------------------------------------------------

// MATime

// int64 atime = 1;
inline void MATime::clear_atime() {
  atime_ = int64_t{0};
}
inline int64_t MATime::_internal_atime() const {
  return atime_;
}
inline int64_t MATime::atime() const {
  // @@protoc_insertion_point(field_get:aafs.MATime.atime)
  return _internal_atime();
}
inline void MATime::_internal_set_atime(int64_t value) {
  
  atime_ = value;
}
inline void MATime::set_atime(int64_t value) {
  _internal_set_atime(value);
  // @@protoc_insertion_point(field_set:aafs.MATime.atime)
}

// int64 mtime = 2;
inline void MATime::clear_mtime() {
  mtime_ = int64_t{0};
}
inline int64_t MATime::_internal_mtime() const {
  return mtime_;
}
inline int64_t MATime::mtime() const {
  // @@protoc_insertion_point(field_get:aafs.MATime.mtime)
  return _internal_mtime();
}
inline void MATime::_internal_set_mtime(int64_t value) {
  
  mtime_ = value;
}
inline void MATime::set_mtime(int64_t value) {
  _internal_set_mtime(value);
  // @@protoc_insertion_point(field_set:aafs.MATime.mtime)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace aafs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_hello_2eproto
