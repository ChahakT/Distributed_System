// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hello.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_hello_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_hello_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_hello_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_hello_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hello_2eproto;
namespace afs {
class GetAttrResponse;
struct GetAttrResponseDefaultTypeInternal;
extern GetAttrResponseDefaultTypeInternal _GetAttrResponse_default_instance_;
class PathRequest;
struct PathRequestDefaultTypeInternal;
extern PathRequestDefaultTypeInternal _PathRequest_default_instance_;
class ReadDirResponse;
struct ReadDirResponseDefaultTypeInternal;
extern ReadDirResponseDefaultTypeInternal _ReadDirResponse_default_instance_;
class Stat;
struct StatDefaultTypeInternal;
extern StatDefaultTypeInternal _Stat_default_instance_;
}  // namespace afs
PROTOBUF_NAMESPACE_OPEN
template<> ::afs::GetAttrResponse* Arena::CreateMaybeMessage<::afs::GetAttrResponse>(Arena*);
template<> ::afs::PathRequest* Arena::CreateMaybeMessage<::afs::PathRequest>(Arena*);
template<> ::afs::ReadDirResponse* Arena::CreateMaybeMessage<::afs::ReadDirResponse>(Arena*);
template<> ::afs::Stat* Arena::CreateMaybeMessage<::afs::Stat>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace afs {

// ===================================================================

class Stat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afs.Stat) */ {
 public:
  inline Stat() : Stat(nullptr) {}
  ~Stat() override;
  explicit constexpr Stat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stat(const Stat& from);
  Stat(Stat&& from) noexcept
    : Stat() {
    *this = ::std::move(from);
  }

  inline Stat& operator=(const Stat& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stat& operator=(Stat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stat& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stat* internal_default_instance() {
    return reinterpret_cast<const Stat*>(
               &_Stat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Stat& a, Stat& b) {
    a.Swap(&b);
  }
  inline void Swap(Stat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Stat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Stat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Stat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Stat& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afs.Stat";
  }
  protected:
  explicit Stat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kModeFieldNumber = 3,
    kNlinkFieldNumber = 4,
    kUidFieldNumber = 5,
    kGidFieldNumber = 6,
    kRdevFieldNumber = 7,
    kSizeFieldNumber = 8,
    kBlksizeFieldNumber = 9,
    kBlocksFieldNumber = 10,
    kAtimeFieldNumber = 11,
    kMtimeFieldNumber = 12,
    kCtimeFieldNumber = 13,
  };
  // uint64 dev = 1;
  void clear_dev();
  uint64_t dev() const;
  void set_dev(uint64_t value);
  private:
  uint64_t _internal_dev() const;
  void _internal_set_dev(uint64_t value);
  public:

  // uint64 ino = 2;
  void clear_ino();
  uint64_t ino() const;
  void set_ino(uint64_t value);
  private:
  uint64_t _internal_ino() const;
  void _internal_set_ino(uint64_t value);
  public:

  // uint64 mode = 3;
  void clear_mode();
  uint64_t mode() const;
  void set_mode(uint64_t value);
  private:
  uint64_t _internal_mode() const;
  void _internal_set_mode(uint64_t value);
  public:

  // uint64 nlink = 4;
  void clear_nlink();
  uint64_t nlink() const;
  void set_nlink(uint64_t value);
  private:
  uint64_t _internal_nlink() const;
  void _internal_set_nlink(uint64_t value);
  public:

  // uint64 uid = 5;
  void clear_uid();
  uint64_t uid() const;
  void set_uid(uint64_t value);
  private:
  uint64_t _internal_uid() const;
  void _internal_set_uid(uint64_t value);
  public:

  // uint64 gid = 6;
  void clear_gid();
  uint64_t gid() const;
  void set_gid(uint64_t value);
  private:
  uint64_t _internal_gid() const;
  void _internal_set_gid(uint64_t value);
  public:

  // uint64 rdev = 7;
  void clear_rdev();
  uint64_t rdev() const;
  void set_rdev(uint64_t value);
  private:
  uint64_t _internal_rdev() const;
  void _internal_set_rdev(uint64_t value);
  public:

  // uint64 size = 8;
  void clear_size();
  uint64_t size() const;
  void set_size(uint64_t value);
  private:
  uint64_t _internal_size() const;
  void _internal_set_size(uint64_t value);
  public:

  // uint64 blksize = 9;
  void clear_blksize();
  uint64_t blksize() const;
  void set_blksize(uint64_t value);
  private:
  uint64_t _internal_blksize() const;
  void _internal_set_blksize(uint64_t value);
  public:

  // uint64 blocks = 10;
  void clear_blocks();
  uint64_t blocks() const;
  void set_blocks(uint64_t value);
  private:
  uint64_t _internal_blocks() const;
  void _internal_set_blocks(uint64_t value);
  public:

  // uint64 atime = 11;
  void clear_atime();
  uint64_t atime() const;
  void set_atime(uint64_t value);
  private:
  uint64_t _internal_atime() const;
  void _internal_set_atime(uint64_t value);
  public:

  // uint64 mtime = 12;
  void clear_mtime();
  uint64_t mtime() const;
  void set_mtime(uint64_t value);
  private:
  uint64_t _internal_mtime() const;
  void _internal_set_mtime(uint64_t value);
  public:

  // uint64 ctime = 13;
  void clear_ctime();
  uint64_t ctime() const;
  void set_ctime(uint64_t value);
  private:
  uint64_t _internal_ctime() const;
  void _internal_set_ctime(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:afs.Stat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t dev_;
  uint64_t ino_;
  uint64_t mode_;
  uint64_t nlink_;
  uint64_t uid_;
  uint64_t gid_;
  uint64_t rdev_;
  uint64_t size_;
  uint64_t blksize_;
  uint64_t blocks_;
  uint64_t atime_;
  uint64_t mtime_;
  uint64_t ctime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hello_2eproto;
};
// -------------------------------------------------------------------

class PathRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afs.PathRequest) */ {
 public:
  inline PathRequest() : PathRequest(nullptr) {}
  ~PathRequest() override;
  explicit constexpr PathRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PathRequest(const PathRequest& from);
  PathRequest(PathRequest&& from) noexcept
    : PathRequest() {
    *this = ::std::move(from);
  }

  inline PathRequest& operator=(const PathRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PathRequest& operator=(PathRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PathRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PathRequest* internal_default_instance() {
    return reinterpret_cast<const PathRequest*>(
               &_PathRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PathRequest& a, PathRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PathRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PathRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PathRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PathRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PathRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PathRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afs.PathRequest";
  }
  protected:
  explicit PathRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:afs.PathRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hello_2eproto;
};
// -------------------------------------------------------------------

class GetAttrResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afs.GetAttrResponse) */ {
 public:
  inline GetAttrResponse() : GetAttrResponse(nullptr) {}
  ~GetAttrResponse() override;
  explicit constexpr GetAttrResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAttrResponse(const GetAttrResponse& from);
  GetAttrResponse(GetAttrResponse&& from) noexcept
    : GetAttrResponse() {
    *this = ::std::move(from);
  }

  inline GetAttrResponse& operator=(const GetAttrResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAttrResponse& operator=(GetAttrResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAttrResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAttrResponse* internal_default_instance() {
    return reinterpret_cast<const GetAttrResponse*>(
               &_GetAttrResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetAttrResponse& a, GetAttrResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAttrResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAttrResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAttrResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAttrResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAttrResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetAttrResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAttrResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afs.GetAttrResponse";
  }
  protected:
  explicit GetAttrResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatFieldNumber = 2,
    kRetFieldNumber = 1,
  };
  // .afs.Stat stat = 2;
  bool has_stat() const;
  private:
  bool _internal_has_stat() const;
  public:
  void clear_stat();
  const ::afs::Stat& stat() const;
  PROTOBUF_NODISCARD ::afs::Stat* release_stat();
  ::afs::Stat* mutable_stat();
  void set_allocated_stat(::afs::Stat* stat);
  private:
  const ::afs::Stat& _internal_stat() const;
  ::afs::Stat* _internal_mutable_stat();
  public:
  void unsafe_arena_set_allocated_stat(
      ::afs::Stat* stat);
  ::afs::Stat* unsafe_arena_release_stat();

  // int32 ret = 1;
  void clear_ret();
  int32_t ret() const;
  void set_ret(int32_t value);
  private:
  int32_t _internal_ret() const;
  void _internal_set_ret(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:afs.GetAttrResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::afs::Stat* stat_;
  int32_t ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hello_2eproto;
};
// -------------------------------------------------------------------

class ReadDirResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afs.ReadDirResponse) */ {
 public:
  inline ReadDirResponse() : ReadDirResponse(nullptr) {}
  ~ReadDirResponse() override;
  explicit constexpr ReadDirResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadDirResponse(const ReadDirResponse& from);
  ReadDirResponse(ReadDirResponse&& from) noexcept
    : ReadDirResponse() {
    *this = ::std::move(from);
  }

  inline ReadDirResponse& operator=(const ReadDirResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadDirResponse& operator=(ReadDirResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadDirResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadDirResponse* internal_default_instance() {
    return reinterpret_cast<const ReadDirResponse*>(
               &_ReadDirResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReadDirResponse& a, ReadDirResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadDirResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadDirResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadDirResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadDirResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadDirResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReadDirResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadDirResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afs.ReadDirResponse";
  }
  protected:
  explicit ReadDirResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 2,
    kRetFieldNumber = 1,
  };
  // repeated string entries = 2;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  const std::string& entries(int index) const;
  std::string* mutable_entries(int index);
  void set_entries(int index, const std::string& value);
  void set_entries(int index, std::string&& value);
  void set_entries(int index, const char* value);
  void set_entries(int index, const char* value, size_t size);
  std::string* add_entries();
  void add_entries(const std::string& value);
  void add_entries(std::string&& value);
  void add_entries(const char* value);
  void add_entries(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& entries() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_entries();
  private:
  const std::string& _internal_entries(int index) const;
  std::string* _internal_add_entries();
  public:

  // int32 ret = 1;
  void clear_ret();
  int32_t ret() const;
  void set_ret(int32_t value);
  private:
  int32_t _internal_ret() const;
  void _internal_set_ret(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:afs.ReadDirResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> entries_;
  int32_t ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hello_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Stat

// uint64 dev = 1;
inline void Stat::clear_dev() {
  dev_ = uint64_t{0u};
}
inline uint64_t Stat::_internal_dev() const {
  return dev_;
}
inline uint64_t Stat::dev() const {
  // @@protoc_insertion_point(field_get:afs.Stat.dev)
  return _internal_dev();
}
inline void Stat::_internal_set_dev(uint64_t value) {
  
  dev_ = value;
}
inline void Stat::set_dev(uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:afs.Stat.dev)
}

// uint64 ino = 2;
inline void Stat::clear_ino() {
  ino_ = uint64_t{0u};
}
inline uint64_t Stat::_internal_ino() const {
  return ino_;
}
inline uint64_t Stat::ino() const {
  // @@protoc_insertion_point(field_get:afs.Stat.ino)
  return _internal_ino();
}
inline void Stat::_internal_set_ino(uint64_t value) {
  
  ino_ = value;
}
inline void Stat::set_ino(uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:afs.Stat.ino)
}

// uint64 mode = 3;
inline void Stat::clear_mode() {
  mode_ = uint64_t{0u};
}
inline uint64_t Stat::_internal_mode() const {
  return mode_;
}
inline uint64_t Stat::mode() const {
  // @@protoc_insertion_point(field_get:afs.Stat.mode)
  return _internal_mode();
}
inline void Stat::_internal_set_mode(uint64_t value) {
  
  mode_ = value;
}
inline void Stat::set_mode(uint64_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:afs.Stat.mode)
}

// uint64 nlink = 4;
inline void Stat::clear_nlink() {
  nlink_ = uint64_t{0u};
}
inline uint64_t Stat::_internal_nlink() const {
  return nlink_;
}
inline uint64_t Stat::nlink() const {
  // @@protoc_insertion_point(field_get:afs.Stat.nlink)
  return _internal_nlink();
}
inline void Stat::_internal_set_nlink(uint64_t value) {
  
  nlink_ = value;
}
inline void Stat::set_nlink(uint64_t value) {
  _internal_set_nlink(value);
  // @@protoc_insertion_point(field_set:afs.Stat.nlink)
}

// uint64 uid = 5;
inline void Stat::clear_uid() {
  uid_ = uint64_t{0u};
}
inline uint64_t Stat::_internal_uid() const {
  return uid_;
}
inline uint64_t Stat::uid() const {
  // @@protoc_insertion_point(field_get:afs.Stat.uid)
  return _internal_uid();
}
inline void Stat::_internal_set_uid(uint64_t value) {
  
  uid_ = value;
}
inline void Stat::set_uid(uint64_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:afs.Stat.uid)
}

// uint64 gid = 6;
inline void Stat::clear_gid() {
  gid_ = uint64_t{0u};
}
inline uint64_t Stat::_internal_gid() const {
  return gid_;
}
inline uint64_t Stat::gid() const {
  // @@protoc_insertion_point(field_get:afs.Stat.gid)
  return _internal_gid();
}
inline void Stat::_internal_set_gid(uint64_t value) {
  
  gid_ = value;
}
inline void Stat::set_gid(uint64_t value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:afs.Stat.gid)
}

// uint64 rdev = 7;
inline void Stat::clear_rdev() {
  rdev_ = uint64_t{0u};
}
inline uint64_t Stat::_internal_rdev() const {
  return rdev_;
}
inline uint64_t Stat::rdev() const {
  // @@protoc_insertion_point(field_get:afs.Stat.rdev)
  return _internal_rdev();
}
inline void Stat::_internal_set_rdev(uint64_t value) {
  
  rdev_ = value;
}
inline void Stat::set_rdev(uint64_t value) {
  _internal_set_rdev(value);
  // @@protoc_insertion_point(field_set:afs.Stat.rdev)
}

// uint64 size = 8;
inline void Stat::clear_size() {
  size_ = uint64_t{0u};
}
inline uint64_t Stat::_internal_size() const {
  return size_;
}
inline uint64_t Stat::size() const {
  // @@protoc_insertion_point(field_get:afs.Stat.size)
  return _internal_size();
}
inline void Stat::_internal_set_size(uint64_t value) {
  
  size_ = value;
}
inline void Stat::set_size(uint64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:afs.Stat.size)
}

// uint64 blksize = 9;
inline void Stat::clear_blksize() {
  blksize_ = uint64_t{0u};
}
inline uint64_t Stat::_internal_blksize() const {
  return blksize_;
}
inline uint64_t Stat::blksize() const {
  // @@protoc_insertion_point(field_get:afs.Stat.blksize)
  return _internal_blksize();
}
inline void Stat::_internal_set_blksize(uint64_t value) {
  
  blksize_ = value;
}
inline void Stat::set_blksize(uint64_t value) {
  _internal_set_blksize(value);
  // @@protoc_insertion_point(field_set:afs.Stat.blksize)
}

// uint64 blocks = 10;
inline void Stat::clear_blocks() {
  blocks_ = uint64_t{0u};
}
inline uint64_t Stat::_internal_blocks() const {
  return blocks_;
}
inline uint64_t Stat::blocks() const {
  // @@protoc_insertion_point(field_get:afs.Stat.blocks)
  return _internal_blocks();
}
inline void Stat::_internal_set_blocks(uint64_t value) {
  
  blocks_ = value;
}
inline void Stat::set_blocks(uint64_t value) {
  _internal_set_blocks(value);
  // @@protoc_insertion_point(field_set:afs.Stat.blocks)
}

// uint64 atime = 11;
inline void Stat::clear_atime() {
  atime_ = uint64_t{0u};
}
inline uint64_t Stat::_internal_atime() const {
  return atime_;
}
inline uint64_t Stat::atime() const {
  // @@protoc_insertion_point(field_get:afs.Stat.atime)
  return _internal_atime();
}
inline void Stat::_internal_set_atime(uint64_t value) {
  
  atime_ = value;
}
inline void Stat::set_atime(uint64_t value) {
  _internal_set_atime(value);
  // @@protoc_insertion_point(field_set:afs.Stat.atime)
}

// uint64 mtime = 12;
inline void Stat::clear_mtime() {
  mtime_ = uint64_t{0u};
}
inline uint64_t Stat::_internal_mtime() const {
  return mtime_;
}
inline uint64_t Stat::mtime() const {
  // @@protoc_insertion_point(field_get:afs.Stat.mtime)
  return _internal_mtime();
}
inline void Stat::_internal_set_mtime(uint64_t value) {
  
  mtime_ = value;
}
inline void Stat::set_mtime(uint64_t value) {
  _internal_set_mtime(value);
  // @@protoc_insertion_point(field_set:afs.Stat.mtime)
}

// uint64 ctime = 13;
inline void Stat::clear_ctime() {
  ctime_ = uint64_t{0u};
}
inline uint64_t Stat::_internal_ctime() const {
  return ctime_;
}
inline uint64_t Stat::ctime() const {
  // @@protoc_insertion_point(field_get:afs.Stat.ctime)
  return _internal_ctime();
}
inline void Stat::_internal_set_ctime(uint64_t value) {
  
  ctime_ = value;
}
inline void Stat::set_ctime(uint64_t value) {
  _internal_set_ctime(value);
  // @@protoc_insertion_point(field_set:afs.Stat.ctime)
}

// -------------------------------------------------------------------

// PathRequest

// string path = 1;
inline void PathRequest::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& PathRequest::path() const {
  // @@protoc_insertion_point(field_get:afs.PathRequest.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PathRequest::set_path(ArgT0&& arg0, ArgT... args) {
 
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:afs.PathRequest.path)
}
inline std::string* PathRequest::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:afs.PathRequest.path)
  return _s;
}
inline const std::string& PathRequest::_internal_path() const {
  return path_.Get();
}
inline void PathRequest::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PathRequest::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PathRequest::release_path() {
  // @@protoc_insertion_point(field_release:afs.PathRequest.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PathRequest::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:afs.PathRequest.path)
}

// -------------------------------------------------------------------

// GetAttrResponse

// int32 ret = 1;
inline void GetAttrResponse::clear_ret() {
  ret_ = 0;
}
inline int32_t GetAttrResponse::_internal_ret() const {
  return ret_;
}
inline int32_t GetAttrResponse::ret() const {
  // @@protoc_insertion_point(field_get:afs.GetAttrResponse.ret)
  return _internal_ret();
}
inline void GetAttrResponse::_internal_set_ret(int32_t value) {
  
  ret_ = value;
}
inline void GetAttrResponse::set_ret(int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:afs.GetAttrResponse.ret)
}

// .afs.Stat stat = 2;
inline bool GetAttrResponse::_internal_has_stat() const {
  return this != internal_default_instance() && stat_ != nullptr;
}
inline bool GetAttrResponse::has_stat() const {
  return _internal_has_stat();
}
inline void GetAttrResponse::clear_stat() {
  if (GetArenaForAllocation() == nullptr && stat_ != nullptr) {
    delete stat_;
  }
  stat_ = nullptr;
}
inline const ::afs::Stat& GetAttrResponse::_internal_stat() const {
  const ::afs::Stat* p = stat_;
  return p != nullptr ? *p : reinterpret_cast<const ::afs::Stat&>(
      ::afs::_Stat_default_instance_);
}
inline const ::afs::Stat& GetAttrResponse::stat() const {
  // @@protoc_insertion_point(field_get:afs.GetAttrResponse.stat)
  return _internal_stat();
}
inline void GetAttrResponse::unsafe_arena_set_allocated_stat(
    ::afs::Stat* stat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stat_);
  }
  stat_ = stat;
  if (stat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:afs.GetAttrResponse.stat)
}
inline ::afs::Stat* GetAttrResponse::release_stat() {
  
  ::afs::Stat* temp = stat_;
  stat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::afs::Stat* GetAttrResponse::unsafe_arena_release_stat() {
  // @@protoc_insertion_point(field_release:afs.GetAttrResponse.stat)
  
  ::afs::Stat* temp = stat_;
  stat_ = nullptr;
  return temp;
}
inline ::afs::Stat* GetAttrResponse::_internal_mutable_stat() {
  
  if (stat_ == nullptr) {
    auto* p = CreateMaybeMessage<::afs::Stat>(GetArenaForAllocation());
    stat_ = p;
  }
  return stat_;
}
inline ::afs::Stat* GetAttrResponse::mutable_stat() {
  ::afs::Stat* _msg = _internal_mutable_stat();
  // @@protoc_insertion_point(field_mutable:afs.GetAttrResponse.stat)
  return _msg;
}
inline void GetAttrResponse::set_allocated_stat(::afs::Stat* stat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete stat_;
  }
  if (stat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::afs::Stat>::GetOwningArena(stat);
    if (message_arena != submessage_arena) {
      stat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stat, submessage_arena);
    }
    
  } else {
    
  }
  stat_ = stat;
  // @@protoc_insertion_point(field_set_allocated:afs.GetAttrResponse.stat)
}

// -------------------------------------------------------------------

// ReadDirResponse

// int32 ret = 1;
inline void ReadDirResponse::clear_ret() {
  ret_ = 0;
}
inline int32_t ReadDirResponse::_internal_ret() const {
  return ret_;
}
inline int32_t ReadDirResponse::ret() const {
  // @@protoc_insertion_point(field_get:afs.ReadDirResponse.ret)
  return _internal_ret();
}
inline void ReadDirResponse::_internal_set_ret(int32_t value) {
  
  ret_ = value;
}
inline void ReadDirResponse::set_ret(int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:afs.ReadDirResponse.ret)
}

// repeated string entries = 2;
inline int ReadDirResponse::_internal_entries_size() const {
  return entries_.size();
}
inline int ReadDirResponse::entries_size() const {
  return _internal_entries_size();
}
inline void ReadDirResponse::clear_entries() {
  entries_.Clear();
}
inline std::string* ReadDirResponse::add_entries() {
  std::string* _s = _internal_add_entries();
  // @@protoc_insertion_point(field_add_mutable:afs.ReadDirResponse.entries)
  return _s;
}
inline const std::string& ReadDirResponse::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const std::string& ReadDirResponse::entries(int index) const {
  // @@protoc_insertion_point(field_get:afs.ReadDirResponse.entries)
  return _internal_entries(index);
}
inline std::string* ReadDirResponse::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:afs.ReadDirResponse.entries)
  return entries_.Mutable(index);
}
inline void ReadDirResponse::set_entries(int index, const std::string& value) {
  entries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:afs.ReadDirResponse.entries)
}
inline void ReadDirResponse::set_entries(int index, std::string&& value) {
  entries_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:afs.ReadDirResponse.entries)
}
inline void ReadDirResponse::set_entries(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  entries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:afs.ReadDirResponse.entries)
}
inline void ReadDirResponse::set_entries(int index, const char* value, size_t size) {
  entries_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:afs.ReadDirResponse.entries)
}
inline std::string* ReadDirResponse::_internal_add_entries() {
  return entries_.Add();
}
inline void ReadDirResponse::add_entries(const std::string& value) {
  entries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:afs.ReadDirResponse.entries)
}
inline void ReadDirResponse::add_entries(std::string&& value) {
  entries_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:afs.ReadDirResponse.entries)
}
inline void ReadDirResponse::add_entries(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  entries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:afs.ReadDirResponse.entries)
}
inline void ReadDirResponse::add_entries(const char* value, size_t size) {
  entries_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:afs.ReadDirResponse.entries)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReadDirResponse::entries() const {
  // @@protoc_insertion_point(field_list:afs.ReadDirResponse.entries)
  return entries_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ReadDirResponse::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:afs.ReadDirResponse.entries)
  return &entries_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace afs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_hello_2eproto
