// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: hello.proto
#ifndef GRPC_hello_2eproto__INCLUDED
#define GRPC_hello_2eproto__INCLUDED

#include "hello.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace aafs {

class gRPCService final {
 public:
  static constexpr char const* service_full_name() {
    return "aafs.gRPCService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status s_getattr(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::aafs::GetAttrResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::aafs::GetAttrResponse>> Asyncs_getattr(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::aafs::GetAttrResponse>>(Asyncs_getattrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::aafs::GetAttrResponse>> PrepareAsyncs_getattr(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::aafs::GetAttrResponse>>(PrepareAsyncs_getattrRaw(context, request, cq));
    }
    virtual ::grpc::Status s_readdir(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::aafs::ReadDirResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::aafs::ReadDirResponse>> Asyncs_readdir(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::aafs::ReadDirResponse>>(Asyncs_readdirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::aafs::ReadDirResponse>> PrepareAsyncs_readdir(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::aafs::ReadDirResponse>>(PrepareAsyncs_readdirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::aafs::FileContent>> s_download(::grpc::ClientContext* context, const ::aafs::PathRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::aafs::FileContent>>(s_downloadRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::aafs::FileContent>> Asyncs_download(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::aafs::FileContent>>(Asyncs_downloadRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::aafs::FileContent>> PrepareAsyncs_download(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::aafs::FileContent>>(PrepareAsyncs_downloadRaw(context, request, cq));
    }
    virtual ::grpc::Status s_mkdir(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::aafs::StatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::aafs::StatusResponse>> Asyncs_mkdir(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::aafs::StatusResponse>>(Asyncs_mkdirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::aafs::StatusResponse>> PrepareAsyncs_mkdir(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::aafs::StatusResponse>>(PrepareAsyncs_mkdirRaw(context, request, cq));
    }
    virtual ::grpc::Status s_rmdir(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::aafs::StatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::aafs::StatusResponse>> Asyncs_rmdir(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::aafs::StatusResponse>>(Asyncs_rmdirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::aafs::StatusResponse>> PrepareAsyncs_rmdir(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::aafs::StatusResponse>>(PrepareAsyncs_rmdirRaw(context, request, cq));
    }
    virtual ::grpc::Status s_creat(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::aafs::StatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::aafs::StatusResponse>> Asyncs_creat(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::aafs::StatusResponse>>(Asyncs_creatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::aafs::StatusResponse>> PrepareAsyncs_creat(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::aafs::StatusResponse>>(PrepareAsyncs_creatRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void s_getattr(::grpc::ClientContext* context, const ::aafs::PathRequest* request, ::aafs::GetAttrResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void s_getattr(::grpc::ClientContext* context, const ::aafs::PathRequest* request, ::aafs::GetAttrResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void s_readdir(::grpc::ClientContext* context, const ::aafs::PathRequest* request, ::aafs::ReadDirResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void s_readdir(::grpc::ClientContext* context, const ::aafs::PathRequest* request, ::aafs::ReadDirResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void s_download(::grpc::ClientContext* context, const ::aafs::PathRequest* request, ::grpc::ClientReadReactor< ::aafs::FileContent>* reactor) = 0;
      virtual void s_mkdir(::grpc::ClientContext* context, const ::aafs::PathRequest* request, ::aafs::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void s_mkdir(::grpc::ClientContext* context, const ::aafs::PathRequest* request, ::aafs::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void s_rmdir(::grpc::ClientContext* context, const ::aafs::PathRequest* request, ::aafs::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void s_rmdir(::grpc::ClientContext* context, const ::aafs::PathRequest* request, ::aafs::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void s_creat(::grpc::ClientContext* context, const ::aafs::PathRequest* request, ::aafs::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void s_creat(::grpc::ClientContext* context, const ::aafs::PathRequest* request, ::aafs::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::aafs::GetAttrResponse>* Asyncs_getattrRaw(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::aafs::GetAttrResponse>* PrepareAsyncs_getattrRaw(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::aafs::ReadDirResponse>* Asyncs_readdirRaw(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::aafs::ReadDirResponse>* PrepareAsyncs_readdirRaw(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::aafs::FileContent>* s_downloadRaw(::grpc::ClientContext* context, const ::aafs::PathRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::aafs::FileContent>* Asyncs_downloadRaw(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::aafs::FileContent>* PrepareAsyncs_downloadRaw(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::aafs::StatusResponse>* Asyncs_mkdirRaw(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::aafs::StatusResponse>* PrepareAsyncs_mkdirRaw(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::aafs::StatusResponse>* Asyncs_rmdirRaw(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::aafs::StatusResponse>* PrepareAsyncs_rmdirRaw(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::aafs::StatusResponse>* Asyncs_creatRaw(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::aafs::StatusResponse>* PrepareAsyncs_creatRaw(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status s_getattr(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::aafs::GetAttrResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::aafs::GetAttrResponse>> Asyncs_getattr(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::aafs::GetAttrResponse>>(Asyncs_getattrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::aafs::GetAttrResponse>> PrepareAsyncs_getattr(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::aafs::GetAttrResponse>>(PrepareAsyncs_getattrRaw(context, request, cq));
    }
    ::grpc::Status s_readdir(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::aafs::ReadDirResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::aafs::ReadDirResponse>> Asyncs_readdir(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::aafs::ReadDirResponse>>(Asyncs_readdirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::aafs::ReadDirResponse>> PrepareAsyncs_readdir(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::aafs::ReadDirResponse>>(PrepareAsyncs_readdirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::aafs::FileContent>> s_download(::grpc::ClientContext* context, const ::aafs::PathRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::aafs::FileContent>>(s_downloadRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::aafs::FileContent>> Asyncs_download(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::aafs::FileContent>>(Asyncs_downloadRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::aafs::FileContent>> PrepareAsyncs_download(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::aafs::FileContent>>(PrepareAsyncs_downloadRaw(context, request, cq));
    }
    ::grpc::Status s_mkdir(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::aafs::StatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::aafs::StatusResponse>> Asyncs_mkdir(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::aafs::StatusResponse>>(Asyncs_mkdirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::aafs::StatusResponse>> PrepareAsyncs_mkdir(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::aafs::StatusResponse>>(PrepareAsyncs_mkdirRaw(context, request, cq));
    }
    ::grpc::Status s_rmdir(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::aafs::StatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::aafs::StatusResponse>> Asyncs_rmdir(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::aafs::StatusResponse>>(Asyncs_rmdirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::aafs::StatusResponse>> PrepareAsyncs_rmdir(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::aafs::StatusResponse>>(PrepareAsyncs_rmdirRaw(context, request, cq));
    }
    ::grpc::Status s_creat(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::aafs::StatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::aafs::StatusResponse>> Asyncs_creat(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::aafs::StatusResponse>>(Asyncs_creatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::aafs::StatusResponse>> PrepareAsyncs_creat(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::aafs::StatusResponse>>(PrepareAsyncs_creatRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void s_getattr(::grpc::ClientContext* context, const ::aafs::PathRequest* request, ::aafs::GetAttrResponse* response, std::function<void(::grpc::Status)>) override;
      void s_getattr(::grpc::ClientContext* context, const ::aafs::PathRequest* request, ::aafs::GetAttrResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void s_readdir(::grpc::ClientContext* context, const ::aafs::PathRequest* request, ::aafs::ReadDirResponse* response, std::function<void(::grpc::Status)>) override;
      void s_readdir(::grpc::ClientContext* context, const ::aafs::PathRequest* request, ::aafs::ReadDirResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void s_download(::grpc::ClientContext* context, const ::aafs::PathRequest* request, ::grpc::ClientReadReactor< ::aafs::FileContent>* reactor) override;
      void s_mkdir(::grpc::ClientContext* context, const ::aafs::PathRequest* request, ::aafs::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      void s_mkdir(::grpc::ClientContext* context, const ::aafs::PathRequest* request, ::aafs::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void s_rmdir(::grpc::ClientContext* context, const ::aafs::PathRequest* request, ::aafs::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      void s_rmdir(::grpc::ClientContext* context, const ::aafs::PathRequest* request, ::aafs::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void s_creat(::grpc::ClientContext* context, const ::aafs::PathRequest* request, ::aafs::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      void s_creat(::grpc::ClientContext* context, const ::aafs::PathRequest* request, ::aafs::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::aafs::GetAttrResponse>* Asyncs_getattrRaw(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::aafs::GetAttrResponse>* PrepareAsyncs_getattrRaw(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::aafs::ReadDirResponse>* Asyncs_readdirRaw(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::aafs::ReadDirResponse>* PrepareAsyncs_readdirRaw(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::aafs::FileContent>* s_downloadRaw(::grpc::ClientContext* context, const ::aafs::PathRequest& request) override;
    ::grpc::ClientAsyncReader< ::aafs::FileContent>* Asyncs_downloadRaw(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::aafs::FileContent>* PrepareAsyncs_downloadRaw(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::aafs::StatusResponse>* Asyncs_mkdirRaw(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::aafs::StatusResponse>* PrepareAsyncs_mkdirRaw(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::aafs::StatusResponse>* Asyncs_rmdirRaw(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::aafs::StatusResponse>* PrepareAsyncs_rmdirRaw(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::aafs::StatusResponse>* Asyncs_creatRaw(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::aafs::StatusResponse>* PrepareAsyncs_creatRaw(::grpc::ClientContext* context, const ::aafs::PathRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_s_getattr_;
    const ::grpc::internal::RpcMethod rpcmethod_s_readdir_;
    const ::grpc::internal::RpcMethod rpcmethod_s_download_;
    const ::grpc::internal::RpcMethod rpcmethod_s_mkdir_;
    const ::grpc::internal::RpcMethod rpcmethod_s_rmdir_;
    const ::grpc::internal::RpcMethod rpcmethod_s_creat_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status s_getattr(::grpc::ServerContext* context, const ::aafs::PathRequest* request, ::aafs::GetAttrResponse* response);
    virtual ::grpc::Status s_readdir(::grpc::ServerContext* context, const ::aafs::PathRequest* request, ::aafs::ReadDirResponse* response);
    virtual ::grpc::Status s_download(::grpc::ServerContext* context, const ::aafs::PathRequest* request, ::grpc::ServerWriter< ::aafs::FileContent>* writer);
    virtual ::grpc::Status s_mkdir(::grpc::ServerContext* context, const ::aafs::PathRequest* request, ::aafs::StatusResponse* response);
    virtual ::grpc::Status s_rmdir(::grpc::ServerContext* context, const ::aafs::PathRequest* request, ::aafs::StatusResponse* response);
    virtual ::grpc::Status s_creat(::grpc::ServerContext* context, const ::aafs::PathRequest* request, ::aafs::StatusResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_s_getattr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_s_getattr() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_s_getattr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status s_getattr(::grpc::ServerContext* /*context*/, const ::aafs::PathRequest* /*request*/, ::aafs::GetAttrResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requests_getattr(::grpc::ServerContext* context, ::aafs::PathRequest* request, ::grpc::ServerAsyncResponseWriter< ::aafs::GetAttrResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_s_readdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_s_readdir() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_s_readdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status s_readdir(::grpc::ServerContext* /*context*/, const ::aafs::PathRequest* /*request*/, ::aafs::ReadDirResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requests_readdir(::grpc::ServerContext* context, ::aafs::PathRequest* request, ::grpc::ServerAsyncResponseWriter< ::aafs::ReadDirResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_s_download : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_s_download() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_s_download() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status s_download(::grpc::ServerContext* /*context*/, const ::aafs::PathRequest* /*request*/, ::grpc::ServerWriter< ::aafs::FileContent>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requests_download(::grpc::ServerContext* context, ::aafs::PathRequest* request, ::grpc::ServerAsyncWriter< ::aafs::FileContent>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_s_mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_s_mkdir() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_s_mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status s_mkdir(::grpc::ServerContext* /*context*/, const ::aafs::PathRequest* /*request*/, ::aafs::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requests_mkdir(::grpc::ServerContext* context, ::aafs::PathRequest* request, ::grpc::ServerAsyncResponseWriter< ::aafs::StatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_s_rmdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_s_rmdir() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_s_rmdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status s_rmdir(::grpc::ServerContext* /*context*/, const ::aafs::PathRequest* /*request*/, ::aafs::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requests_rmdir(::grpc::ServerContext* context, ::aafs::PathRequest* request, ::grpc::ServerAsyncResponseWriter< ::aafs::StatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_s_creat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_s_creat() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_s_creat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status s_creat(::grpc::ServerContext* /*context*/, const ::aafs::PathRequest* /*request*/, ::aafs::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requests_creat(::grpc::ServerContext* context, ::aafs::PathRequest* request, ::grpc::ServerAsyncResponseWriter< ::aafs::StatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_s_getattr<WithAsyncMethod_s_readdir<WithAsyncMethod_s_download<WithAsyncMethod_s_mkdir<WithAsyncMethod_s_rmdir<WithAsyncMethod_s_creat<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_s_getattr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_s_getattr() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::aafs::PathRequest, ::aafs::GetAttrResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::aafs::PathRequest* request, ::aafs::GetAttrResponse* response) { return this->s_getattr(context, request, response); }));}
    void SetMessageAllocatorFor_s_getattr(
        ::grpc::MessageAllocator< ::aafs::PathRequest, ::aafs::GetAttrResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::aafs::PathRequest, ::aafs::GetAttrResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_s_getattr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status s_getattr(::grpc::ServerContext* /*context*/, const ::aafs::PathRequest* /*request*/, ::aafs::GetAttrResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* s_getattr(
      ::grpc::CallbackServerContext* /*context*/, const ::aafs::PathRequest* /*request*/, ::aafs::GetAttrResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_s_readdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_s_readdir() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::aafs::PathRequest, ::aafs::ReadDirResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::aafs::PathRequest* request, ::aafs::ReadDirResponse* response) { return this->s_readdir(context, request, response); }));}
    void SetMessageAllocatorFor_s_readdir(
        ::grpc::MessageAllocator< ::aafs::PathRequest, ::aafs::ReadDirResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::aafs::PathRequest, ::aafs::ReadDirResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_s_readdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status s_readdir(::grpc::ServerContext* /*context*/, const ::aafs::PathRequest* /*request*/, ::aafs::ReadDirResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* s_readdir(
      ::grpc::CallbackServerContext* /*context*/, const ::aafs::PathRequest* /*request*/, ::aafs::ReadDirResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_s_download : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_s_download() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::aafs::PathRequest, ::aafs::FileContent>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::aafs::PathRequest* request) { return this->s_download(context, request); }));
    }
    ~WithCallbackMethod_s_download() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status s_download(::grpc::ServerContext* /*context*/, const ::aafs::PathRequest* /*request*/, ::grpc::ServerWriter< ::aafs::FileContent>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::aafs::FileContent>* s_download(
      ::grpc::CallbackServerContext* /*context*/, const ::aafs::PathRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_s_mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_s_mkdir() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::aafs::PathRequest, ::aafs::StatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::aafs::PathRequest* request, ::aafs::StatusResponse* response) { return this->s_mkdir(context, request, response); }));}
    void SetMessageAllocatorFor_s_mkdir(
        ::grpc::MessageAllocator< ::aafs::PathRequest, ::aafs::StatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::aafs::PathRequest, ::aafs::StatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_s_mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status s_mkdir(::grpc::ServerContext* /*context*/, const ::aafs::PathRequest* /*request*/, ::aafs::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* s_mkdir(
      ::grpc::CallbackServerContext* /*context*/, const ::aafs::PathRequest* /*request*/, ::aafs::StatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_s_rmdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_s_rmdir() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::aafs::PathRequest, ::aafs::StatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::aafs::PathRequest* request, ::aafs::StatusResponse* response) { return this->s_rmdir(context, request, response); }));}
    void SetMessageAllocatorFor_s_rmdir(
        ::grpc::MessageAllocator< ::aafs::PathRequest, ::aafs::StatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::aafs::PathRequest, ::aafs::StatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_s_rmdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status s_rmdir(::grpc::ServerContext* /*context*/, const ::aafs::PathRequest* /*request*/, ::aafs::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* s_rmdir(
      ::grpc::CallbackServerContext* /*context*/, const ::aafs::PathRequest* /*request*/, ::aafs::StatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_s_creat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_s_creat() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::aafs::PathRequest, ::aafs::StatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::aafs::PathRequest* request, ::aafs::StatusResponse* response) { return this->s_creat(context, request, response); }));}
    void SetMessageAllocatorFor_s_creat(
        ::grpc::MessageAllocator< ::aafs::PathRequest, ::aafs::StatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::aafs::PathRequest, ::aafs::StatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_s_creat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status s_creat(::grpc::ServerContext* /*context*/, const ::aafs::PathRequest* /*request*/, ::aafs::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* s_creat(
      ::grpc::CallbackServerContext* /*context*/, const ::aafs::PathRequest* /*request*/, ::aafs::StatusResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_s_getattr<WithCallbackMethod_s_readdir<WithCallbackMethod_s_download<WithCallbackMethod_s_mkdir<WithCallbackMethod_s_rmdir<WithCallbackMethod_s_creat<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_s_getattr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_s_getattr() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_s_getattr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status s_getattr(::grpc::ServerContext* /*context*/, const ::aafs::PathRequest* /*request*/, ::aafs::GetAttrResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_s_readdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_s_readdir() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_s_readdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status s_readdir(::grpc::ServerContext* /*context*/, const ::aafs::PathRequest* /*request*/, ::aafs::ReadDirResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_s_download : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_s_download() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_s_download() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status s_download(::grpc::ServerContext* /*context*/, const ::aafs::PathRequest* /*request*/, ::grpc::ServerWriter< ::aafs::FileContent>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_s_mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_s_mkdir() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_s_mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status s_mkdir(::grpc::ServerContext* /*context*/, const ::aafs::PathRequest* /*request*/, ::aafs::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_s_rmdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_s_rmdir() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_s_rmdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status s_rmdir(::grpc::ServerContext* /*context*/, const ::aafs::PathRequest* /*request*/, ::aafs::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_s_creat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_s_creat() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_s_creat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status s_creat(::grpc::ServerContext* /*context*/, const ::aafs::PathRequest* /*request*/, ::aafs::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_s_getattr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_s_getattr() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_s_getattr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status s_getattr(::grpc::ServerContext* /*context*/, const ::aafs::PathRequest* /*request*/, ::aafs::GetAttrResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requests_getattr(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_s_readdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_s_readdir() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_s_readdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status s_readdir(::grpc::ServerContext* /*context*/, const ::aafs::PathRequest* /*request*/, ::aafs::ReadDirResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requests_readdir(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_s_download : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_s_download() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_s_download() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status s_download(::grpc::ServerContext* /*context*/, const ::aafs::PathRequest* /*request*/, ::grpc::ServerWriter< ::aafs::FileContent>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requests_download(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_s_mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_s_mkdir() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_s_mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status s_mkdir(::grpc::ServerContext* /*context*/, const ::aafs::PathRequest* /*request*/, ::aafs::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requests_mkdir(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_s_rmdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_s_rmdir() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_s_rmdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status s_rmdir(::grpc::ServerContext* /*context*/, const ::aafs::PathRequest* /*request*/, ::aafs::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requests_rmdir(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_s_creat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_s_creat() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_s_creat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status s_creat(::grpc::ServerContext* /*context*/, const ::aafs::PathRequest* /*request*/, ::aafs::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requests_creat(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_s_getattr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_s_getattr() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->s_getattr(context, request, response); }));
    }
    ~WithRawCallbackMethod_s_getattr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status s_getattr(::grpc::ServerContext* /*context*/, const ::aafs::PathRequest* /*request*/, ::aafs::GetAttrResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* s_getattr(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_s_readdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_s_readdir() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->s_readdir(context, request, response); }));
    }
    ~WithRawCallbackMethod_s_readdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status s_readdir(::grpc::ServerContext* /*context*/, const ::aafs::PathRequest* /*request*/, ::aafs::ReadDirResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* s_readdir(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_s_download : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_s_download() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->s_download(context, request); }));
    }
    ~WithRawCallbackMethod_s_download() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status s_download(::grpc::ServerContext* /*context*/, const ::aafs::PathRequest* /*request*/, ::grpc::ServerWriter< ::aafs::FileContent>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* s_download(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_s_mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_s_mkdir() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->s_mkdir(context, request, response); }));
    }
    ~WithRawCallbackMethod_s_mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status s_mkdir(::grpc::ServerContext* /*context*/, const ::aafs::PathRequest* /*request*/, ::aafs::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* s_mkdir(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_s_rmdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_s_rmdir() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->s_rmdir(context, request, response); }));
    }
    ~WithRawCallbackMethod_s_rmdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status s_rmdir(::grpc::ServerContext* /*context*/, const ::aafs::PathRequest* /*request*/, ::aafs::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* s_rmdir(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_s_creat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_s_creat() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->s_creat(context, request, response); }));
    }
    ~WithRawCallbackMethod_s_creat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status s_creat(::grpc::ServerContext* /*context*/, const ::aafs::PathRequest* /*request*/, ::aafs::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* s_creat(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_s_getattr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_s_getattr() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::aafs::PathRequest, ::aafs::GetAttrResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::aafs::PathRequest, ::aafs::GetAttrResponse>* streamer) {
                       return this->Streameds_getattr(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_s_getattr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status s_getattr(::grpc::ServerContext* /*context*/, const ::aafs::PathRequest* /*request*/, ::aafs::GetAttrResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streameds_getattr(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::aafs::PathRequest,::aafs::GetAttrResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_s_readdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_s_readdir() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::aafs::PathRequest, ::aafs::ReadDirResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::aafs::PathRequest, ::aafs::ReadDirResponse>* streamer) {
                       return this->Streameds_readdir(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_s_readdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status s_readdir(::grpc::ServerContext* /*context*/, const ::aafs::PathRequest* /*request*/, ::aafs::ReadDirResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streameds_readdir(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::aafs::PathRequest,::aafs::ReadDirResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_s_mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_s_mkdir() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::aafs::PathRequest, ::aafs::StatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::aafs::PathRequest, ::aafs::StatusResponse>* streamer) {
                       return this->Streameds_mkdir(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_s_mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status s_mkdir(::grpc::ServerContext* /*context*/, const ::aafs::PathRequest* /*request*/, ::aafs::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streameds_mkdir(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::aafs::PathRequest,::aafs::StatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_s_rmdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_s_rmdir() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::aafs::PathRequest, ::aafs::StatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::aafs::PathRequest, ::aafs::StatusResponse>* streamer) {
                       return this->Streameds_rmdir(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_s_rmdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status s_rmdir(::grpc::ServerContext* /*context*/, const ::aafs::PathRequest* /*request*/, ::aafs::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streameds_rmdir(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::aafs::PathRequest,::aafs::StatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_s_creat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_s_creat() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::aafs::PathRequest, ::aafs::StatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::aafs::PathRequest, ::aafs::StatusResponse>* streamer) {
                       return this->Streameds_creat(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_s_creat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status s_creat(::grpc::ServerContext* /*context*/, const ::aafs::PathRequest* /*request*/, ::aafs::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streameds_creat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::aafs::PathRequest,::aafs::StatusResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_s_getattr<WithStreamedUnaryMethod_s_readdir<WithStreamedUnaryMethod_s_mkdir<WithStreamedUnaryMethod_s_rmdir<WithStreamedUnaryMethod_s_creat<Service > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_s_download : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_s_download() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::aafs::PathRequest, ::aafs::FileContent>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::aafs::PathRequest, ::aafs::FileContent>* streamer) {
                       return this->Streameds_download(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_s_download() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status s_download(::grpc::ServerContext* /*context*/, const ::aafs::PathRequest* /*request*/, ::grpc::ServerWriter< ::aafs::FileContent>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status Streameds_download(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::aafs::PathRequest,::aafs::FileContent>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_s_download<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_s_getattr<WithStreamedUnaryMethod_s_readdir<WithSplitStreamingMethod_s_download<WithStreamedUnaryMethod_s_mkdir<WithStreamedUnaryMethod_s_rmdir<WithStreamedUnaryMethod_s_creat<Service > > > > > > StreamedService;
};

}  // namespace aafs


#endif  // GRPC_hello_2eproto__INCLUDED
