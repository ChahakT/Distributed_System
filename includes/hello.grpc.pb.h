// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: hello.proto
#ifndef GRPC_hello_2eproto__INCLUDED
#define GRPC_hello_2eproto__INCLUDED

#include "hello.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace afs {

class gRPCService final {
 public:
  static constexpr char const* service_full_name() {
    return "afs.gRPCService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // rpc open (ClientRequest) returns (ServerResponse) {}
    virtual ::grpc::Status s_getattr(::grpc::ClientContext* context, const ::afs::PathRequest& request, ::afs::GetAttrResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afs::GetAttrResponse>> Asyncs_getattr(::grpc::ClientContext* context, const ::afs::PathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afs::GetAttrResponse>>(Asyncs_getattrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afs::GetAttrResponse>> PrepareAsyncs_getattr(::grpc::ClientContext* context, const ::afs::PathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afs::GetAttrResponse>>(PrepareAsyncs_getattrRaw(context, request, cq));
    }
    virtual ::grpc::Status s_readdir(::grpc::ClientContext* context, const ::afs::PathRequest& request, ::afs::ReadDirResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afs::ReadDirResponse>> Asyncs_readdir(::grpc::ClientContext* context, const ::afs::PathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afs::ReadDirResponse>>(Asyncs_readdirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afs::ReadDirResponse>> PrepareAsyncs_readdir(::grpc::ClientContext* context, const ::afs::PathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afs::ReadDirResponse>>(PrepareAsyncs_readdirRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // rpc open (ClientRequest) returns (ServerResponse) {}
      virtual void s_getattr(::grpc::ClientContext* context, const ::afs::PathRequest* request, ::afs::GetAttrResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void s_getattr(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::afs::GetAttrResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void s_getattr(::grpc::ClientContext* context, const ::afs::PathRequest* request, ::afs::GetAttrResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void s_getattr(::grpc::ClientContext* context, const ::afs::PathRequest* request, ::afs::GetAttrResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void s_getattr(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::afs::GetAttrResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void s_getattr(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::afs::GetAttrResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void s_readdir(::grpc::ClientContext* context, const ::afs::PathRequest* request, ::afs::ReadDirResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void s_readdir(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::afs::ReadDirResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void s_readdir(::grpc::ClientContext* context, const ::afs::PathRequest* request, ::afs::ReadDirResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void s_readdir(::grpc::ClientContext* context, const ::afs::PathRequest* request, ::afs::ReadDirResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void s_readdir(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::afs::ReadDirResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void s_readdir(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::afs::ReadDirResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afs::GetAttrResponse>* Asyncs_getattrRaw(::grpc::ClientContext* context, const ::afs::PathRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afs::GetAttrResponse>* PrepareAsyncs_getattrRaw(::grpc::ClientContext* context, const ::afs::PathRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afs::ReadDirResponse>* Asyncs_readdirRaw(::grpc::ClientContext* context, const ::afs::PathRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afs::ReadDirResponse>* PrepareAsyncs_readdirRaw(::grpc::ClientContext* context, const ::afs::PathRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status s_getattr(::grpc::ClientContext* context, const ::afs::PathRequest& request, ::afs::GetAttrResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afs::GetAttrResponse>> Asyncs_getattr(::grpc::ClientContext* context, const ::afs::PathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afs::GetAttrResponse>>(Asyncs_getattrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afs::GetAttrResponse>> PrepareAsyncs_getattr(::grpc::ClientContext* context, const ::afs::PathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afs::GetAttrResponse>>(PrepareAsyncs_getattrRaw(context, request, cq));
    }
    ::grpc::Status s_readdir(::grpc::ClientContext* context, const ::afs::PathRequest& request, ::afs::ReadDirResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afs::ReadDirResponse>> Asyncs_readdir(::grpc::ClientContext* context, const ::afs::PathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afs::ReadDirResponse>>(Asyncs_readdirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afs::ReadDirResponse>> PrepareAsyncs_readdir(::grpc::ClientContext* context, const ::afs::PathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afs::ReadDirResponse>>(PrepareAsyncs_readdirRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void s_getattr(::grpc::ClientContext* context, const ::afs::PathRequest* request, ::afs::GetAttrResponse* response, std::function<void(::grpc::Status)>) override;
      void s_getattr(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::afs::GetAttrResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void s_getattr(::grpc::ClientContext* context, const ::afs::PathRequest* request, ::afs::GetAttrResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void s_getattr(::grpc::ClientContext* context, const ::afs::PathRequest* request, ::afs::GetAttrResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void s_getattr(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::afs::GetAttrResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void s_getattr(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::afs::GetAttrResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void s_readdir(::grpc::ClientContext* context, const ::afs::PathRequest* request, ::afs::ReadDirResponse* response, std::function<void(::grpc::Status)>) override;
      void s_readdir(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::afs::ReadDirResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void s_readdir(::grpc::ClientContext* context, const ::afs::PathRequest* request, ::afs::ReadDirResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void s_readdir(::grpc::ClientContext* context, const ::afs::PathRequest* request, ::afs::ReadDirResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void s_readdir(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::afs::ReadDirResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void s_readdir(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::afs::ReadDirResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::afs::GetAttrResponse>* Asyncs_getattrRaw(::grpc::ClientContext* context, const ::afs::PathRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::afs::GetAttrResponse>* PrepareAsyncs_getattrRaw(::grpc::ClientContext* context, const ::afs::PathRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::afs::ReadDirResponse>* Asyncs_readdirRaw(::grpc::ClientContext* context, const ::afs::PathRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::afs::ReadDirResponse>* PrepareAsyncs_readdirRaw(::grpc::ClientContext* context, const ::afs::PathRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_s_getattr_;
    const ::grpc::internal::RpcMethod rpcmethod_s_readdir_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // rpc open (ClientRequest) returns (ServerResponse) {}
    virtual ::grpc::Status s_getattr(::grpc::ServerContext* context, const ::afs::PathRequest* request, ::afs::GetAttrResponse* response);
    virtual ::grpc::Status s_readdir(::grpc::ServerContext* context, const ::afs::PathRequest* request, ::afs::ReadDirResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_s_getattr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_s_getattr() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_s_getattr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status s_getattr(::grpc::ServerContext* /*context*/, const ::afs::PathRequest* /*request*/, ::afs::GetAttrResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requests_getattr(::grpc::ServerContext* context, ::afs::PathRequest* request, ::grpc::ServerAsyncResponseWriter< ::afs::GetAttrResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_s_readdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_s_readdir() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_s_readdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status s_readdir(::grpc::ServerContext* /*context*/, const ::afs::PathRequest* /*request*/, ::afs::ReadDirResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requests_readdir(::grpc::ServerContext* context, ::afs::PathRequest* request, ::grpc::ServerAsyncResponseWriter< ::afs::ReadDirResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_s_getattr<WithAsyncMethod_s_readdir<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_s_getattr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_s_getattr() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::afs::PathRequest, ::afs::GetAttrResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::afs::PathRequest* request, ::afs::GetAttrResponse* response) { return this->s_getattr(context, request, response); }));}
    void SetMessageAllocatorFor_s_getattr(
        ::grpc::experimental::MessageAllocator< ::afs::PathRequest, ::afs::GetAttrResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::afs::PathRequest, ::afs::GetAttrResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_s_getattr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status s_getattr(::grpc::ServerContext* /*context*/, const ::afs::PathRequest* /*request*/, ::afs::GetAttrResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* s_getattr(
      ::grpc::CallbackServerContext* /*context*/, const ::afs::PathRequest* /*request*/, ::afs::GetAttrResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* s_getattr(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::afs::PathRequest* /*request*/, ::afs::GetAttrResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_s_readdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_s_readdir() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::afs::PathRequest, ::afs::ReadDirResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::afs::PathRequest* request, ::afs::ReadDirResponse* response) { return this->s_readdir(context, request, response); }));}
    void SetMessageAllocatorFor_s_readdir(
        ::grpc::experimental::MessageAllocator< ::afs::PathRequest, ::afs::ReadDirResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::afs::PathRequest, ::afs::ReadDirResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_s_readdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status s_readdir(::grpc::ServerContext* /*context*/, const ::afs::PathRequest* /*request*/, ::afs::ReadDirResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* s_readdir(
      ::grpc::CallbackServerContext* /*context*/, const ::afs::PathRequest* /*request*/, ::afs::ReadDirResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* s_readdir(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::afs::PathRequest* /*request*/, ::afs::ReadDirResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_s_getattr<ExperimentalWithCallbackMethod_s_readdir<Service > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_s_getattr<ExperimentalWithCallbackMethod_s_readdir<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_s_getattr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_s_getattr() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_s_getattr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status s_getattr(::grpc::ServerContext* /*context*/, const ::afs::PathRequest* /*request*/, ::afs::GetAttrResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_s_readdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_s_readdir() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_s_readdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status s_readdir(::grpc::ServerContext* /*context*/, const ::afs::PathRequest* /*request*/, ::afs::ReadDirResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_s_getattr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_s_getattr() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_s_getattr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status s_getattr(::grpc::ServerContext* /*context*/, const ::afs::PathRequest* /*request*/, ::afs::GetAttrResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requests_getattr(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_s_readdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_s_readdir() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_s_readdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status s_readdir(::grpc::ServerContext* /*context*/, const ::afs::PathRequest* /*request*/, ::afs::ReadDirResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requests_readdir(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_s_getattr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_s_getattr() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->s_getattr(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_s_getattr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status s_getattr(::grpc::ServerContext* /*context*/, const ::afs::PathRequest* /*request*/, ::afs::GetAttrResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* s_getattr(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* s_getattr(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_s_readdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_s_readdir() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->s_readdir(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_s_readdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status s_readdir(::grpc::ServerContext* /*context*/, const ::afs::PathRequest* /*request*/, ::afs::ReadDirResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* s_readdir(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* s_readdir(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_s_getattr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_s_getattr() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::afs::PathRequest, ::afs::GetAttrResponse>(std::bind(&WithStreamedUnaryMethod_s_getattr<BaseClass>::Streameds_getattr, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_s_getattr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status s_getattr(::grpc::ServerContext* /*context*/, const ::afs::PathRequest* /*request*/, ::afs::GetAttrResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streameds_getattr(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::afs::PathRequest,::afs::GetAttrResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_s_readdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_s_readdir() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::afs::PathRequest, ::afs::ReadDirResponse>(std::bind(&WithStreamedUnaryMethod_s_readdir<BaseClass>::Streameds_readdir, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_s_readdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status s_readdir(::grpc::ServerContext* /*context*/, const ::afs::PathRequest* /*request*/, ::afs::ReadDirResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streameds_readdir(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::afs::PathRequest,::afs::ReadDirResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_s_getattr<WithStreamedUnaryMethod_s_readdir<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_s_getattr<WithStreamedUnaryMethod_s_readdir<Service > > StreamedService;
};

}  // namespace afs


#endif  // GRPC_hello_2eproto__INCLUDED
